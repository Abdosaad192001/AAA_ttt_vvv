import subprocess
import uiautomation as auto
import time
import requests
from bs4 import BeautifulSoup
import re
import csv
import json
import random
from playwright.sync_api import sync_playwright
from faker import Faker
import os
import pycountry
from datetime import datetime
from datetime import datetime, timedelta
import string
import shutil
import pandas as pd
import json
import threading
import keyboard
#الاختيارات للدول
from rich.console import Console
from rich.table import Table
#الالوان
#الصوتيات
import winsound
from pathlib import Path
from colorama import Fore, Style, init
import sys
import ctypes
# main_script.py
import hashlib
import base64
from datetime import datetime, timedelta
import platform, uuid, psutil

# إنشاء كائن Console من rich
console = Console()

# تفعيل دعم الألوان في موجه الأوامر

init(autoreset=True)


# تعريف الألوان
GREEN = Fore.GREEN
BLUE = Fore.BLUE
RED = Fore.RED
CYAN = Fore.CYAN
RESET = Style.RESET_ALL
MAGENTA = Fore.MAGENTA



#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





def Hotmail_Bee_Mail ():

    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    from rich.console import Console
    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init
    import sys
    import ctypes
    # main_script.py
    import hashlib
    import base64
    import platform, uuid, psutil
    import poplib
    from email import parser
    import pyperclip
    import uuid
    import winreg
    from evpn import ExpressVpnApi
    import threading
    import time
    import keyboard


    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    CYAN = Fore.CYAN
    RESET = Style.RESET_ALL
    MAGENTA = Fore.MAGENTA








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////



    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌There are no sites among the preferred servers."

    )
            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ Unable to retrieve the current IP address."
    )
            return

        print(Fore.CYAN + f"🌐 Current IP before connection: {original_ip}")

        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")
                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ New IP address: {new_ip}")
                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, IP address did not change.({new_ip})")
                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")

            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")
                time.sleep(5)


    def disconnect_vpn(api):
        ##print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        ##print("Connection disconnected.")










    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED +"❌ Apple TV Not Run")
            except:
                print(Fore.RED +"❌ Apple TV Not Run")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        #print("")

                        print("")
                else:
                    #print("❌ The button is not present.")

                    print("")

            except:
                #print(Fore.RED + "❌ Apple TV is not open")

                print("")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        #print("")

                        print("")

                else:
                    #print("❌ The button is not present.")

                    print("")
            except:
                #print("❌ Apple TV Not Run")
                print("")

            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     #print(Fore.RED + "❌ Button does not support Invoke.")
        #                     print("")
        #             else:
        #                 #print(Fore.RED + "❌ Button not found.")
        #                 print("")
        #         except:
        #             #print(Fore.RED + "❌ Apple TV is not open")

        #             print("")


        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")

    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------






        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            #print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            #print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            #print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                #print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                print("")

                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                #print("Elevation successful, relaunching...")
                print("")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        #log_action(f"--- Running: {name} ---")
        print("")

        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                #print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
                print("")

        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            #print(error_msg)
            print("")

        #print("-" * 30) # Separator
        print("")


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            ##print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            ##print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")




#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()







    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account( email, password,password_outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street)  :
        print(Fore.GREEN + email)
        api_instance = ExpressVpnApi()
        connect_vpn(api_instance)
    #time.sleep(50)

        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')




                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////









            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 
                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            





            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()






#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                #print("")

                                print("")
                        else:
                            #print("")
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")

                        print("")

                except Exception as e:
                    #print("")
                    print("")
                

            except Exception as e:
                #print(f" {e}")
                print("")
                
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                #print(f"")
                print("")



            try:

                otp_code = get_otp_code_outlook()
                # جلب كود OTP
                #otp_code = get_verification_code_from_tempmail(page)
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        #time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            #print("")
                            print("")
                    except Exception as e:
                        #print(f"")
                        print("")
                else:
                    #print("")
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        #print("")

                        print("")
                else:
                    #print("❌ الزر Verify مش موجود.")
                    print("")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

  
            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        Reset()
                        run_spoof_all_console()



                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False

    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   

            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------
            Reset()
            run_spoof_all_console()

            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return False




    def get_otp_code_outlook():


        class pop33:
            def __init__(self):
                self.all_list = open('input/emails.txt', 'r').read().splitlines()

            def extract_verification_code(self, email_body):
                match = re.search(r'\b\d{6}\b', email_body)
                if match:
                    return match.group(0)
                return None

            def get_access_token(self, client_id, refresh_token):
                try:
                    data = {
                        'client_id': client_id,
                        'grant_type': 'refresh_token',
                        'refresh_token': refresh_token
                    }
                    response = requests.post('https://login.live.com/oauth20_token.srf', data=data)
                    if response.status_code == 200:
                        access_token = response.json().get('access_token')
                        console.print(f"[green]✔️ Access token fetched for client_id: {client_id}[/green]")
                        return access_token
                    else:
                        console.print(f"[red]❌ Failed to get access token: {response.text}[/red]")
                except Exception as e:
                    console.print(f"[red]❌ Exception while getting access token: {e}[/red]")
                return None

            def generate_auth_string(self, user, token):
                auth_string = f"user={user}\1auth=Bearer {token}\1\1"
                return auth_string

            def connect_pop3(self, email, access_token):
                pop3_server = 'outlook.office365.com'
                pop3_port = 995

                try:
                    console.print(f"[yellow]⏳ Trying to connect to {email} inbox...[/yellow]")
                    server = poplib.POP3_SSL(pop3_server, pop3_port, timeout=20)
                    auth_string = self.generate_auth_string(email, access_token)
                    encoded_auth_string = base64.b64encode(auth_string.encode("utf-8")).decode("utf-8")

                    server._shortcmd('AUTH XOAUTH2')
                    server._shortcmd(encoded_auth_string)

                    num_messages = len(server.list()[1])
                    console.print(f"[blue]📨 {num_messages} messages found in inbox of {email}[/blue]")

                    for i in reversed(range(num_messages)):
                        response, lines, octets = server.retr(i + 1)
                        msg_content = b"\n".join(lines).decode("utf-8", errors="ignore")
                        message = parser.Parser().parsestr(msg_content)

                        from_email = message.get('from')
                        subject = message.get('subject')

                        if from_email and 'appleid@id.apple.com' in from_email.lower() and subject and 'verify your apple' in subject.lower():
                            console.print(f"[blue]📧 Apple message found:[/blue]")
                            console.print(f"[yellow]From: {from_email}[/yellow]")
                            console.print(f"[yellow]Subject: {subject}[/yellow]")

                            body = ""
                            if message.is_multipart():
                                for part in message.walk():
                                    if part.get_content_type() == 'text/plain':
                                        body = part.get_payload(decode=True).decode(errors="ignore")
                                        break
                            else:
                                body = message.get_payload(decode=True).decode(errors="ignore")

                            verification_code = self.extract_verification_code(body)
                            if verification_code:
                                console.print(f"[green]✅ Verification code: {verification_code}[/green]")
                                server.quit()
                                return verification_code
                            else:
                                console.print(f"[red]❌ No verification code found in Apple email[/red]")
                                break  # نوقف بعد أول رسالة Apple
                    server.quit()
                except Exception as e:
                    console.print(f"[red]❌ Error in connect_pop3: {e}[/red]")
                return None

            def main(self, email_address, password, refresh_token, client_id, account1, index):
                max_attempts = 5
                for attempt in range(1, max_attempts + 1):
                    console.print(f"\n[yellow]🔁 Attempt {attempt} for {email_address}[/yellow]")
                    access_token = self.get_access_token(client_id, refresh_token)
                    if access_token:
                        verification_code = self.connect_pop3(email_address, access_token)
                        if verification_code:
                            pyperclip.copy(verification_code)
                            print(f'{Fore.LIGHTGREEN_EX}[✔] Code copied: {verification_code} {Fore.LIGHTBLACK_EX}[ {email_address} ]')
                            with open('success.txt', 'a') as f:
                                f.write(f'{account1}\n')
                            self.all_list.remove(account1)
                            self.update_accounts_file()
                            return verification_code
                    else:
                        console.print(f"[red]❌ No access token or code for {email_address}, retrying...[/red]")
                    time.sleep(5)

                # If code not found after all attempts
                console.print(f"[red]❌ Failed to retrieve code for {email_address} after {max_attempts} attempts.[/red]")
                with open('failed.txt', 'a') as f:
                    f.write(f'{account1}\n')
                self.all_list.remove(account1)
                self.update_accounts_file()
                return None

            def update_accounts_file(self):
                with open('input/emails.txt', 'w') as f:
                    for account1 in self.all_list:
                        f.write(f'{account1}\n')

            def thread_main(self, account1, index):
                try:
                    email_address, password, refresh_token, client_id = account1.split(':')
                    return self.main(email_address, password, refresh_token, client_id, account1, index)
                except Exception as e:
                    console.print(f"[red]❌ Error processing account {account1}: {e}[/red]")
                    return None


        def get_otp_code():
            instance = pop33()
            for index, account1 in enumerate(instance.all_list):
                result = instance.thread_main(account1, index)
                if result:  # لو جاب كود
                    return result   # إعادة الكود إذا تم العثور عليه
            return None


        otp_code = get_otp_code()  # يمكنك استدعاء الكود هنا
        if otp_code:
            print(f"Verification code received: {otp_code}")
        else:
            print("No verification code found.")

        return otp_code
















    def save_new_account(email, password, phone, otp_link):

        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")






            
        
    def get_email_bee_mail ():

        import requests


        with open("input/Bee_Mail_key.txt", "r") as file:
            client_key = file.read().strip()

        #client_key = "41a655d593fa45f193b249a7a76d4b3d674279"
        url = f"http://bee-mails.com/getEmail?num=1&key={client_key}&emailType=hotmail&format=txt"

        with open("input/Bee_Mail_key.txt", "r") as file:
            accounts_file = file.read().strip()

        accounts_file = "input/emails.txt"

        # التحقق إذا كان الملف يحتوي على حسابات
        def check_existing_accounts():
            try:
                with open(accounts_file, "r") as file:
                    accounts = file.readlines()
                    if accounts:
                        return True
                    return False
            except FileNotFoundError:
                return False

        # إضافة الحساب إلى الملف
        def add_account_to_file(account):
            with open(accounts_file, "a") as file:
                file.write(account + "\n")

        # سحب الحساب فقط إذا لم يكن هناك حسابات موجودة
        if not check_existing_accounts():
            response = requests.get(url)

            if response.status_code == 200:
                #print("الإيميلات اللي اتسحبت:")
                #print(response.text)
                # إضافة الحساب المستخرج إلى الملف
                add_account_to_file(response.text.strip())  # التأكد من إزالة المسافات البيضاء الزائدة
            else:
                print("⚠️ Withdrawal failed or balance is empty.")
        else:
            print("Accounts were already found in the file. No new accounts will be purchased.")




    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)







    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:
                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة

    #-------------------------------------------------------------------------------------------

                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()





    #-----------------------------------------------------------------------------------------------------------------
                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]


    #-----------------------------------------------------------------------------------------------------------------
                    get_email_bee_mail ()

                    # فتح الملف وقراءة الحساب الأول فقط
                    with open('input/emails.txt', 'r') as file:
                        account2 = file.readline().strip()  # قراءة أول سطر

                    if not account2:
                        print("⚠️ The file is empty, exiting the loop...")

                        break


                    # تقسيم السطر وأخذ أول قيمتين فقط
                    parts = account2.split(':')
                    email = parts[0] if len(parts) > 0 else ''
                    password_outlook = parts[1] if len(parts) > 1 else ''

                    print(email, password_outlook)

    #-----------------------------------------------------------------------------------------------------------------

                    # تعطيل التحقق من مانع الإعلانات
        
                    faker = Faker('en_US')
                    # اختيار عنوان عشوائي من نيويورك


                    # تعيين العنوان بناءً على الدولة المختارة
                    # تعيين العنوان بناءً على الدولة المختارة
                    address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                    try:
                        if selected_country == "United States":
                            address_data1 = random.choice(new_york_addresses)

                        elif selected_country == "Egypt":
                            address_data1 = random.choice(egypt_addresses)

                        elif selected_country == "South Africa":
                            address_data1 = random.choice(south_africa_addresses)

                        elif selected_country == "Hong Kong":
                            address_data1 = random.choice(hong_kong_addresses)

                        elif selected_country == "Germany":
                            address_data1 = random.choice(germany_addresses)

                        elif selected_country == "France":
                            address_data1 = random.choice(france_addresses)

                        elif selected_country == "Canada":
                            address_data1 = random.choice(canada_addresses)

                        elif selected_country == "Indonesia":
                            address_data1 = random.choice(indonesia_addresses)

                        elif selected_country == "Netherlands":
                            address_data1 = random.choice(netherlands_addresses)

                        elif selected_country == "Mexico":
                            address_data1 = random.choice(mexico_addresses)

                        elif selected_country == "Kazakhstan":
                            address_data1 = random.choice(kazakhstan_addresses)

                        elif selected_country == "Japan":
                            address_data1 = random.choice(japan_addresses)

                        elif selected_country == "Nigeria":
                            address_data1 = random.choice(nigeria_addresses)

                        elif selected_country == "Slovenia":
                            address_data1 = random.choice(slovenia_addresses)

                        elif selected_country == "Slovakia":
                            address_data1 = random.choice(slovakia_addresses)

                        elif selected_country == "Spain":
                            address_data1 = random.choice(spain_addresses)

                        elif selected_country == "Thailand":
                            address_data1 = random.choice(thailand_addresses)

                        elif selected_country == "United Kingdom":
                            address_data1 = random.choice(uk_addresses)

                        elif selected_country == "Bolivia":
                            address_data1 = random.choice(bolivia_addresses)

                        elif selected_country == "Italy":
                            address_data1 = random.choice(italy_addresses)

                        else:
                            print("No matching country found.")
                            address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                    except Exception as e:
                        print(f"Error occurred: {e}")
                        address_data1 = None


                    # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                    if address_data1:
                        address_data = address_data1
                        print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                    else:
                        print("No address data selected.")

                    # توليد باقي العنوان باستخدام Faker
                    street = faker.street_address()
                    full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                    # ✅ 1. خزّن الاسم الأول والاسم الأخير
                    first_name = faker.first_name()
                    last_name = faker.last_name()

                    # ✅ 2. ركّب الاسم الكامل
                    full_name = f"{first_name} {last_name}"
                    #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
        

                    try:
                        success_flag = process_account( email, password,password_outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                        if not success_flag:
                            #log_error(account)
                            continue  # الانتقال للحساب التالي


                    except Exception as e:
                        print(Fore.RED +f"Failed to process the account {email}: {e}")

                        continue  # الانتقال للحساب التالي
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    


                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        







#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




def Outlook_Bee_Mail ():

    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    from rich.console import Console
    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init
    import sys
    import ctypes
    # main_script.py
    import hashlib
    import base64
    import platform, uuid, psutil
    import poplib
    from email import parser
    import pyperclip
    import uuid
    import winreg
    from evpn import ExpressVpnApi
    import threading
    import time
    import keyboard


    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    CYAN = Fore.CYAN
    RESET = Style.RESET_ALL
    MAGENTA = Fore.MAGENTA








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////



    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌There are no sites among the preferred servers."

    )
            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ Unable to retrieve the current IP address."
    )
            return

        print(Fore.CYAN + f"🌐 Current IP before connection: {original_ip}")

        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")
                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ New IP address: {new_ip}")
                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, IP address did not change.({new_ip})")
                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")

            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")
                time.sleep(5)


    def disconnect_vpn(api):
        ##print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        ##print("Connection disconnected.")









    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED +"❌ Apple TV Not Run")
            except:
                print(Fore.RED +"❌ Apple TV Not Run")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        #print("")

                        print("")
                else:
                    #print("❌ The button is not present.")

                    print("")

            except:
                #print(Fore.RED + "❌ Apple TV is not open")

                print("")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        #print("")

                        print("")

                else:
                    #print("❌ The button is not present.")

                    print("")
            except:
                #print("❌ Apple TV Not Run")
                print("")

            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     #print(Fore.RED + "❌ Button does not support Invoke.")
        #                     print("")
        #             else:
        #                 #print(Fore.RED + "❌ Button not found.")
        #                 print("")
        #         except:
        #             #print(Fore.RED + "❌ Apple TV is not open")

        #             print("")


        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")

    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            #print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            #print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            #print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                #print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                print("")

                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                #print("Elevation successful, relaunching...")
                print("")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        #log_action(f"--- Running: {name} ---")
        print("")

        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                #print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
                print("")

        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            #print(error_msg)
            print("")

        #print("-" * 30) # Separator
        print("")


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            ##print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            ##print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")






#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

























    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account( email, password,password_outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street)  :
        print(Fore.GREEN + email)
        api_instance = ExpressVpnApi()
        connect_vpn(api_instance)
    #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////

 





            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus()

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()









#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False


                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                #print("")

                                print("")
                        else:
                            #print("")
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")

                        print("")

                except Exception as e:
                    #print("")
                    print("")
                

            except Exception as e:
                #print(f" {e}")
                print("")
                
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                #print(f"")
                print("")



            try:

                otp_code = get_otp_code_outlook()
                # جلب كود OTP
                #otp_code = get_verification_code_from_tempmail(page)
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        #time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            #print("")
                            print("")
                    except Exception as e:
                        #print(f"")
                        print("")
                else:
                    #print("")
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        #print("")

                        print("")
                else:
                    #print("❌ الزر Verify مش موجود.")
                    print("")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

 
            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية

                        Reset()
                        run_spoof_all_console()

                        #api_instance.close()
                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------

            Reset()
            run_spoof_all_console()

            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------
            Reset()
            run_spoof_all_console()

            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return False




    def get_otp_code_outlook():


        class pop33:
            def __init__(self):
                self.all_list = open('input/emails.txt', 'r').read().splitlines()

            def extract_verification_code(self, email_body):
                match = re.search(r'\b\d{6}\b', email_body)
                if match:
                    return match.group(0)
                return None

            def get_access_token(self, client_id, refresh_token):
                try:
                    data = {
                        'client_id': client_id,
                        'grant_type': 'refresh_token',
                        'refresh_token': refresh_token
                    }
                    response = requests.post('https://login.live.com/oauth20_token.srf', data=data)
                    if response.status_code == 200:
                        access_token = response.json().get('access_token')
                        console.print(f"[green]✔️ Access token fetched for client_id: {client_id}[/green]")
                        return access_token
                    else:
                        console.print(f"[red]❌ Failed to get access token: {response.text}[/red]")
                except Exception as e:
                    console.print(f"[red]❌ Exception while getting access token: {e}[/red]")
                return None

            def generate_auth_string(self, user, token):
                auth_string = f"user={user}\1auth=Bearer {token}\1\1"
                return auth_string

            def connect_pop3(self, email, access_token):
                pop3_server = 'outlook.office365.com'
                pop3_port = 995

                try:
                    console.print(f"[yellow]⏳ Trying to connect to {email} inbox...[/yellow]")
                    server = poplib.POP3_SSL(pop3_server, pop3_port, timeout=20)
                    auth_string = self.generate_auth_string(email, access_token)
                    encoded_auth_string = base64.b64encode(auth_string.encode("utf-8")).decode("utf-8")

                    server._shortcmd('AUTH XOAUTH2')
                    server._shortcmd(encoded_auth_string)

                    num_messages = len(server.list()[1])
                    console.print(f"[blue]📨 {num_messages} messages found in inbox of {email}[/blue]")

                    for i in reversed(range(num_messages)):
                        response, lines, octets = server.retr(i + 1)
                        msg_content = b"\n".join(lines).decode("utf-8", errors="ignore")
                        message = parser.Parser().parsestr(msg_content)

                        from_email = message.get('from')
                        subject = message.get('subject')

                        if from_email and 'appleid@id.apple.com' in from_email.lower() and subject and 'verify your apple' in subject.lower():
                            console.print(f"[blue]📧 Apple message found:[/blue]")
                            console.print(f"[yellow]From: {from_email}[/yellow]")
                            console.print(f"[yellow]Subject: {subject}[/yellow]")

                            body = ""
                            if message.is_multipart():
                                for part in message.walk():
                                    if part.get_content_type() == 'text/plain':
                                        body = part.get_payload(decode=True).decode(errors="ignore")
                                        break
                            else:
                                body = message.get_payload(decode=True).decode(errors="ignore")

                            verification_code = self.extract_verification_code(body)
                            if verification_code:
                                console.print(f"[green]✅ Verification code: {verification_code}[/green]")
                                server.quit()
                                return verification_code
                            else:
                                console.print(f"[red]❌ No verification code found in Apple email[/red]")
                                break  # نوقف بعد أول رسالة Apple
                    server.quit()
                except Exception as e:
                    console.print(f"[red]❌ Error in connect_pop3: {e}[/red]")
                return None

            def main(self, email_address, password, refresh_token, client_id, account1, index):
                max_attempts = 5
                for attempt in range(1, max_attempts + 1):
                    console.print(f"\n[yellow]🔁 Attempt {attempt} for {email_address}[/yellow]")
                    access_token = self.get_access_token(client_id, refresh_token)
                    if access_token:
                        verification_code = self.connect_pop3(email_address, access_token)
                        if verification_code:
                            pyperclip.copy(verification_code)
                            print(f'{Fore.LIGHTGREEN_EX}[✔] Code copied: {verification_code} {Fore.LIGHTBLACK_EX}[ {email_address} ]')
                            with open('success.txt', 'a') as f:
                                f.write(f'{account1}\n')
                            self.all_list.remove(account1)
                            self.update_accounts_file()
                            return verification_code
                    else:
                        console.print(f"[red]❌ No access token or code for {email_address}, retrying...[/red]")
                    time.sleep(5)

                # If code not found after all attempts
                console.print(f"[red]❌ Failed to retrieve code for {email_address} after {max_attempts} attempts.[/red]")
                with open('failed.txt', 'a') as f:
                    f.write(f'{account1}\n')
                self.all_list.remove(account1)
                self.update_accounts_file()
                return None

            def update_accounts_file(self):
                with open('input/emails.txt', 'w') as f:
                    for account1 in self.all_list:
                        f.write(f'{account1}\n')

            def thread_main(self, account1, index):
                try:
                    email_address, password, refresh_token, client_id = account1.split(':')
                    return self.main(email_address, password, refresh_token, client_id, account1, index)
                except Exception as e:
                    console.print(f"[red]❌ Error processing account {account1}: {e}[/red]")
                    return None


        def get_otp_code():
            instance = pop33()
            for index, account1 in enumerate(instance.all_list):
                result = instance.thread_main(account1, index)
                if result:  # لو جاب كود
                    return result   # إعادة الكود إذا تم العثور عليه
            return None


        otp_code = get_otp_code()  # يمكنك استدعاء الكود هنا
        if otp_code:
            print(f"Verification code received: {otp_code}")
        else:
            print("No verification code found.")

        return otp_code
















    def save_new_account(email, password, phone, otp_link):

        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")






            
        
    def get_email_bee_mail ():

        import requests


        with open("input/Bee_Mail_key.txt", "r") as file:
            client_key = file.read().strip()


        #client_key = "41a655d593fa45f193b249a7a76d4b3d674279"
        url = f"http://bee-mails.com/getEmail?num=1&key={client_key}&emailType=outlook&format=txt"

        with open("input/Bee_Mail_key.txt", "r") as file:
            accounts_file = file.read().strip()

        accounts_file = "input/emails.txt"

        # التحقق إذا كان الملف يحتوي على حسابات
        def check_existing_accounts():
            try:
                with open(accounts_file, "r") as file:
                    accounts = file.readlines()
                    if accounts:
                        return True
                    return False
            except FileNotFoundError:
                return False

        # إضافة الحساب إلى الملف
        def add_account_to_file(account):
            with open(accounts_file, "a") as file:
                file.write(account + "\n")

        # سحب الحساب فقط إذا لم يكن هناك حسابات موجودة
        if not check_existing_accounts():
            response = requests.get(url)

            if response.status_code == 200:
                #print("الإيميلات اللي اتسحبت:")
                #print(response.text)
                # إضافة الحساب المستخرج إلى الملف
                add_account_to_file(response.text.strip())  # التأكد من إزالة المسافات البيضاء الزائدة
            else:
                print("⚠️ Withdrawal failed or balance is empty.")
        else:
            print("Accounts were already found in the file. No new accounts will be purchased.")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)







    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:
                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة

    #-------------------------------------------------------------------------------------------

                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()





    #-----------------------------------------------------------------------------------------------------------------
                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]


    #-----------------------------------------------------------------------------------------------------------------
                    get_email_bee_mail ()

                    # فتح الملف وقراءة الحساب الأول فقط
                    with open('input/emails.txt', 'r') as file:
                        account2 = file.readline().strip()  # قراءة أول سطر

                    if not account2:
                        print("⚠️ The file is empty, exiting the loop...")

                        break


                    # تقسيم السطر وأخذ أول قيمتين فقط
                    parts = account2.split(':')
                    email = parts[0] if len(parts) > 0 else ''
                    password_outlook = parts[1] if len(parts) > 1 else ''

                    print(email, password_outlook)

    #-----------------------------------------------------------------------------------------------------------------

                    # تعطيل التحقق من مانع الإعلانات
        
                    faker = Faker('en_US')
                    # اختيار عنوان عشوائي من نيويورك


                    # تعيين العنوان بناءً على الدولة المختارة
                    # تعيين العنوان بناءً على الدولة المختارة
                    address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                    try:
                        if selected_country == "United States":
                            address_data1 = random.choice(new_york_addresses)

                        elif selected_country == "Egypt":
                            address_data1 = random.choice(egypt_addresses)

                        elif selected_country == "South Africa":
                            address_data1 = random.choice(south_africa_addresses)

                        elif selected_country == "Hong Kong":
                            address_data1 = random.choice(hong_kong_addresses)

                        elif selected_country == "Germany":
                            address_data1 = random.choice(germany_addresses)

                        elif selected_country == "France":
                            address_data1 = random.choice(france_addresses)

                        elif selected_country == "Canada":
                            address_data1 = random.choice(canada_addresses)

                        elif selected_country == "Indonesia":
                            address_data1 = random.choice(indonesia_addresses)

                        elif selected_country == "Netherlands":
                            address_data1 = random.choice(netherlands_addresses)

                        elif selected_country == "Mexico":
                            address_data1 = random.choice(mexico_addresses)

                        elif selected_country == "Kazakhstan":
                            address_data1 = random.choice(kazakhstan_addresses)

                        elif selected_country == "Japan":
                            address_data1 = random.choice(japan_addresses)

                        elif selected_country == "Nigeria":
                            address_data1 = random.choice(nigeria_addresses)

                        elif selected_country == "Slovenia":
                            address_data1 = random.choice(slovenia_addresses)

                        elif selected_country == "Slovakia":
                            address_data1 = random.choice(slovakia_addresses)

                        elif selected_country == "Spain":
                            address_data1 = random.choice(spain_addresses)

                        elif selected_country == "Thailand":
                            address_data1 = random.choice(thailand_addresses)

                        elif selected_country == "United Kingdom":
                            address_data1 = random.choice(uk_addresses)

                        elif selected_country == "Bolivia":
                            address_data1 = random.choice(bolivia_addresses)

                        elif selected_country == "Italy":
                            address_data1 = random.choice(italy_addresses)

                        else:
                            print("No matching country found.")
                            address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                    except Exception as e:
                        print(f"Error occurred: {e}")
                        address_data1 = None


                    # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                    if address_data1:
                        address_data = address_data1
                        print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                    else:
                        print("No address data selected.")

                    # توليد باقي العنوان باستخدام Faker
                    street = faker.street_address()
                    full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                    # ✅ 1. خزّن الاسم الأول والاسم الأخير
                    first_name = faker.first_name()
                    last_name = faker.last_name()

                    # ✅ 2. ركّب الاسم الكامل
                    full_name = f"{first_name} {last_name}"
                    #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
        

                    try:
                        success_flag = process_account( email, password,password_outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                        if not success_flag:
                            #log_error(account)
                            continue  # الانتقال للحساب التالي


                    except Exception as e:
                        print(Fore.RED +f"Failed to process the account {email}: {e}")

                        continue  # الانتقال للحساب التالي
                        
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    


                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        










#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




def Outlook_And_Hotmail_requests ():

    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    from rich.console import Console
    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init
    import sys
    import ctypes
    # main_script.py
    import hashlib
    import base64
    import platform, uuid, psutil
    import poplib
    from email import parser
    import pyperclip
    import uuid
    import winreg
    from evpn import ExpressVpnApi
    import threading
    import time
    import keyboard


    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    CYAN = Fore.CYAN
    RESET = Style.RESET_ALL
    MAGENTA = Fore.MAGENTA








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////



    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌There are no sites among the preferred servers."

    )
            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ Unable to retrieve the current IP address."
    )
            return

        print(Fore.CYAN + f"🌐 Current IP before connection: {original_ip}")

        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")
                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ New IP address: {new_ip}")
                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, IP address did not change.({new_ip})")
                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")

            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")
                time.sleep(5)


    def disconnect_vpn(api):
        ##print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        ##print("Connection disconnected.")










    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED +"❌ Apple TV Not Run")
            except:
                print(Fore.RED +"❌ Apple TV Not Run")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        #print("")

                        print("")
                else:
                    #print("❌ The button is not present.")

                    print("")

            except:
                #print(Fore.RED + "❌ Apple TV is not open")

                print("")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        #print("")

                        print("")

                else:
                    #print("❌ The button is not present.")

                    print("")
            except:
                #print("❌ Apple TV Not Run")
                print("")

            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     #print(Fore.RED + "❌ Button does not support Invoke.")
        #                     print("")
        #             else:
        #                 #print(Fore.RED + "❌ Button not found.")
        #                 print("")
        #         except:
        #             #print(Fore.RED + "❌ Apple TV is not open")

        #             print("")


        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")

    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            #print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            #print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            #print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                #print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                print("")

                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                #print("Elevation successful, relaunching...")
                print("")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        #log_action(f"--- Running: {name} ---")
        print("")

        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                #print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
                print("")

        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            #print(error_msg)
            print("")

        #print("-" * 30) # Separator
        print("")


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")







#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()





















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account( email, password,password_outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street)  :
        print(Fore.GREEN + email)
        api_instance = ExpressVpnApi()
        connect_vpn(api_instance)
    #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////






            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()





#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                #print("")

                                print("")
                        else:
                            #print("")
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")

                        print("")

                except Exception as e:
                    #print("")
                    print("")
                

            except Exception as e:
                #print(f" {e}")
                print("")
                
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                #print(f"")
                print("")



            try:

                otp_code = get_otp_code_outlook()
                # جلب كود OTP
                #otp_code = get_verification_code_from_tempmail(page)
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        #time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            #print("")
                            print("")
                    except Exception as e:
                        #print(f"")
                        print("")
                else:
                    #print("")
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        #print("")

                        print("")
                else:
                    #print("❌ الزر Verify مش موجود.")
                    print("")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        


            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        Reset()
                        run_spoof_all_console()



                        #api_instance.close()
                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------

            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------
            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return False




    def get_otp_code_outlook():


        class pop33:
            def __init__(self):
                self.all_list = open('input/emails.txt', 'r').read().splitlines()

            def extract_verification_code(self, email_body):
                match = re.search(r'\b\d{6}\b', email_body)
                if match:
                    return match.group(0)
                return None

            def get_access_token(self, client_id, refresh_token):
                try:
                    data = {
                        'client_id': client_id,
                        'grant_type': 'refresh_token',
                        'refresh_token': refresh_token
                    }
                    response = requests.post('https://login.live.com/oauth20_token.srf', data=data)
                    if response.status_code == 200:
                        access_token = response.json().get('access_token')
                        console.print(f"[green]✔️ Access token fetched for client_id: {client_id}[/green]")
                        return access_token
                    else:
                        console.print(f"[red]❌ Failed to get access token: {response.text}[/red]")
                except Exception as e:
                    console.print(f"[red]❌ Exception while getting access token: {e}[/red]")
                return None

            def generate_auth_string(self, user, token):
                auth_string = f"user={user}\1auth=Bearer {token}\1\1"
                return auth_string

            def connect_pop3(self, email, access_token):
                pop3_server = 'outlook.office365.com'
                pop3_port = 995

                try:
                    console.print(f"[yellow]⏳ Trying to connect to {email} inbox...[/yellow]")
                    server = poplib.POP3_SSL(pop3_server, pop3_port, timeout=20)
                    auth_string = self.generate_auth_string(email, access_token)
                    encoded_auth_string = base64.b64encode(auth_string.encode("utf-8")).decode("utf-8")

                    server._shortcmd('AUTH XOAUTH2')
                    server._shortcmd(encoded_auth_string)

                    num_messages = len(server.list()[1])
                    console.print(f"[blue]📨 {num_messages} messages found in inbox of {email}[/blue]")

                    for i in reversed(range(num_messages)):
                        response, lines, octets = server.retr(i + 1)
                        msg_content = b"\n".join(lines).decode("utf-8", errors="ignore")
                        message = parser.Parser().parsestr(msg_content)

                        from_email = message.get('from')
                        subject = message.get('subject')

                        if from_email and 'appleid@id.apple.com' in from_email.lower() and subject and 'verify your apple' in subject.lower():
                            console.print(f"[blue]📧 Apple message found:[/blue]")
                            console.print(f"[yellow]From: {from_email}[/yellow]")
                            console.print(f"[yellow]Subject: {subject}[/yellow]")

                            body = ""
                            if message.is_multipart():
                                for part in message.walk():
                                    if part.get_content_type() == 'text/plain':
                                        body = part.get_payload(decode=True).decode(errors="ignore")
                                        break
                            else:
                                body = message.get_payload(decode=True).decode(errors="ignore")

                            verification_code = self.extract_verification_code(body)
                            if verification_code:
                                console.print(f"[green]✅ Verification code: {verification_code}[/green]")
                                server.quit()
                                return verification_code
                            else:
                                console.print(f"[red]❌ No verification code found in Apple email[/red]")
                                break  # نوقف بعد أول رسالة Apple
                    server.quit()
                except Exception as e:
                    console.print(f"[red]❌ Error in connect_pop3: {e}[/red]")
                return None

            def main(self, email_address, password, refresh_token, client_id, account1, index):
                max_attempts = 5
                for attempt in range(1, max_attempts + 1):
                    console.print(f"\n[yellow]🔁 Attempt {attempt} for {email_address}[/yellow]")
                    access_token = self.get_access_token(client_id, refresh_token)
                    if access_token:
                        verification_code = self.connect_pop3(email_address, access_token)
                        if verification_code:
                            pyperclip.copy(verification_code)
                            print(f'{Fore.LIGHTGREEN_EX}[✔] Code copied: {verification_code} {Fore.LIGHTBLACK_EX}[ {email_address} ]')
                            with open('success.txt', 'a') as f:
                                f.write(f'{account1}\n')
                            self.all_list.remove(account1)
                            self.update_accounts_file()
                            return verification_code
                    else:
                        console.print(f"[red]❌ No access token or code for {email_address}, retrying...[/red]")
                    time.sleep(5)

                # If code not found after all attempts
                console.print(f"[red]❌ Failed to retrieve code for {email_address} after {max_attempts} attempts.[/red]")
                with open('failed.txt', 'a') as f:
                    f.write(f'{account1}\n')
                self.all_list.remove(account1)
                self.update_accounts_file()
                return None

            def update_accounts_file(self):
                with open('input/emails.txt', 'w') as f:
                    for account1 in self.all_list:
                        f.write(f'{account1}\n')

            def thread_main(self, account1, index):
                try:
                    email_address, password, refresh_token, client_id = account1.split(':')
                    return self.main(email_address, password, refresh_token, client_id, account1, index)
                except Exception as e:
                    console.print(f"[red]❌ Error processing account {account1}: {e}[/red]")
                    return None


        def get_otp_code():
            instance = pop33()
            for index, account1 in enumerate(instance.all_list):
                result = instance.thread_main(account1, index)
                if result:  # لو جاب كود
                    return result   # إعادة الكود إذا تم العثور عليه
            return None


        otp_code = get_otp_code()  # يمكنك استدعاء الكود هنا
        if otp_code:
            print(f"Verification code received: {otp_code}")
        else:
            print("No verification code found.")

        return otp_code
















    def save_new_account(email, password, phone, otp_link):

        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")


 
    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)







    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:
                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة

    #-------------------------------------------------------------------------------------------

                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()



    #-----------------------------------------------------------------------------------------------------------------
                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]
    #-----------------------------------------------------------------------------------------------------------------
                    # فتح الملف وقراءة الحساب الأول فقط
                    with open('input/emails.txt', 'r') as file:
                        account2 = file.readline().strip()  # قراءة أول سطر

                    if not account2:
                        print("⚠️ The file is empty, exiting the loop...")

                        break


                    # تقسيم السطر وأخذ أول قيمتين فقط
                    parts = account2.split(':')
                    email = parts[0] if len(parts) > 0 else ''
                    password_outlook = parts[1] if len(parts) > 1 else ''

                    print(email, password_outlook)

    #-----------------------------------------------------------------------------------------------------------------

                    # تعطيل التحقق من مانع الإعلانات
        
                    faker = Faker('en_US')
                    # اختيار عنوان عشوائي من نيويورك


                    # تعيين العنوان بناءً على الدولة المختارة
                    # تعيين العنوان بناءً على الدولة المختارة
                    address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                    try:
                        if selected_country == "United States":
                            address_data1 = random.choice(new_york_addresses)

                        elif selected_country == "Egypt":
                            address_data1 = random.choice(egypt_addresses)

                        elif selected_country == "South Africa":
                            address_data1 = random.choice(south_africa_addresses)

                        elif selected_country == "Hong Kong":
                            address_data1 = random.choice(hong_kong_addresses)

                        elif selected_country == "Germany":
                            address_data1 = random.choice(germany_addresses)

                        elif selected_country == "France":
                            address_data1 = random.choice(france_addresses)

                        elif selected_country == "Canada":
                            address_data1 = random.choice(canada_addresses)

                        elif selected_country == "Indonesia":
                            address_data1 = random.choice(indonesia_addresses)

                        elif selected_country == "Netherlands":
                            address_data1 = random.choice(netherlands_addresses)

                        elif selected_country == "Mexico":
                            address_data1 = random.choice(mexico_addresses)

                        elif selected_country == "Kazakhstan":
                            address_data1 = random.choice(kazakhstan_addresses)

                        elif selected_country == "Japan":
                            address_data1 = random.choice(japan_addresses)

                        elif selected_country == "Nigeria":
                            address_data1 = random.choice(nigeria_addresses)

                        elif selected_country == "Slovenia":
                            address_data1 = random.choice(slovenia_addresses)

                        elif selected_country == "Slovakia":
                            address_data1 = random.choice(slovakia_addresses)

                        elif selected_country == "Spain":
                            address_data1 = random.choice(spain_addresses)

                        elif selected_country == "Thailand":
                            address_data1 = random.choice(thailand_addresses)

                        elif selected_country == "United Kingdom":
                            address_data1 = random.choice(uk_addresses)

                        elif selected_country == "Bolivia":
                            address_data1 = random.choice(bolivia_addresses)

                        elif selected_country == "Italy":
                            address_data1 = random.choice(italy_addresses)

                        else:
                            print("No matching country found.")
                            address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                    except Exception as e:
                        print(f"Error occurred: {e}")
                        address_data1 = None


                    # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                    if address_data1:
                        address_data = address_data1
                        print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                    else:
                        print("No address data selected.")

                    # توليد باقي العنوان باستخدام Faker
                    street = faker.street_address()
                    full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                    # ✅ 1. خزّن الاسم الأول والاسم الأخير
                    first_name = faker.first_name()
                    last_name = faker.last_name()

                    # ✅ 2. ركّب الاسم الكامل
                    full_name = f"{first_name} {last_name}"
                    #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
        

                    try:
                        success_flag = process_account( email, password,password_outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                        if not success_flag:
                            #log_error(account)
                            continue  # الانتقال للحساب التالي


                    except Exception as e:
                        print(Fore.RED +f"Failed to process the account {email}: {e}")

                        continue  # الانتقال للحساب التالي
            
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        







#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





def Creat_temp_mail():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json
    import threading
    import time
    import keyboard

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")









    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break







    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator

    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")




#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()























    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)

        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()




#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False
                



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                

            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:

                # جلب كود OTP
                otp_code = get_verification_code_from_tempmail(page)
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية

                        Reset()
                        run_spoof_all_console()

                        #api_instance.close()
                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False



#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------


#/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   

            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------


             #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return False





    def tempmail(page):

        retries = 5
        while retries > 0:
            try: 
                page.goto('https://tempmail.ninja/')
                page.wait_for_load_state()

                # انتظار ظهور العنصر الذي يحتوي على البريد الإلكتروني
                page.wait_for_selector("#email")

                email_element = page.locator("#email")
                email1 = email_element.inner_text()

                # التحقق من وجود كلمة "temporary email"
                while "temporary email" in email1.lower():
                    #print("البريد الإلكتروني المؤقت ظهر. ننتظر تحديث البريد الإلكتروني...")
                    email1 = email_element.inner_text()
                #print(f"البريد الإلكتروني الحقيقي: {email1}")

                return email1
            
            except Exception as e:
                print(f"حدث خطأ أثناء معالجة email: {str(e)}")
                retries -= 1
                page.reload()
                page.wait_for_load_state()
                #time.sleep(5)

        raise Exception("OTP not found after several attempts.")









    def get_verification_code_from_tempmail(page):

        retries = 5
        while retries > 0:
            try:
                #print("📨 في انتظار رسالة Apple...")
                page.wait_for_load_state()

                # نلاقي رسالة Apple
                apple_email_locator = page.locator("div.subject", has_text="Verify your Apple Account email address")
                if not apple_email_locator.is_visible():
                    print("❌ رسالة Apple مش ظهرت لسه.")
                    return None

                #print("✅ Found رسالة Apple.")

                # نضغط على الزر الخاص بفتح الرسالة
                parent_message = apple_email_locator.locator("xpath=ancestor::div[contains(@class, 'd-flex')]")
                open_button = parent_message.locator("button.open-message")
                open_button.click()

                # ننتظر انتقال الصفحة
                page.wait_for_url("**/message/**", timeout=40000)
                #print("📄 تم فتح الرسالة...")

                # انتظار ظهور iframe باستخدام CSS selector أو XPath
                #print("انتظار ظهور iframe...")
                iframe_locator = page.frame_locator("iframe.d-block")  # تحديد iframe بناءً على الكلاس أو معرّف آخر
                
                # التفاعل مباشرة مع كائن FrameLocator
                #print("استخراج محتوى الرسالة من داخل iframe...")
                otp_element = iframe_locator.locator("//html/body/div/div/div[2]/div/div/p/b")  # XPath الخاص بالكود داخل الإطار
                otp_element.wait_for(state="visible", timeout=40000)  # الانتظار حتى يصبح العنصر مرئيًا

                # استخراج النص من العنصر
                otp = otp_element.inner_text()  # استخراج النص من العنصر
                print(f"🔐 code:  {otp}")
                return otp
            
            except Exception as e:
                print(f"🚫 خطأ أثناء استخراج الكود: {str(e)}")
                retries -= 1
                page.reload()
                page.wait_for_load_state()
                time.sleep(6)

        raise Exception("OTP not found after several attempts.")











    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)

                        email = tempmail(page)



                        try:
                            success_flag = process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    


                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)       
    if __name__ == "__main__":
        main()
        
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


def Creat_temporarymail():


    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json
    from playwright.sync_api import expect
    #الاختيارات للدول
    from rich.console import Console
    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init
    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")







    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break










    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator

    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")





#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()














    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()




#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False

                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:
                otp_code = get_verification_code_from_email(page)
                print(Fore.CYAN + f"\n✅ Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_email()
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                            
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------
                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)


                        Reset()
                        run_spoof_all_console()

                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------



            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)
            Reset()
            run_spoof_all_console()

            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------

            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)
 
            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   
            return False




    # توليد اسم مستخدم عشوائي بالكامل
    def generate_username(length=12):
        return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))
    



    
    def tempmail(page):

        retries = 5
        while retries > 0:
            try: 
                page.goto('https://temporarymail.com/en/')
                page.wait_for_load_state()
                email1 = page.locator("#emailAddress").input_value()
                print(email1)

                # # انتظار ظهور العنصر الذي يحتوي على البريد الإلكتروني
                # page.wait_for_selector("#emailAddress")

                # email_element = page.locator("#emailAddress")
                # email1 = email_element.inner_text()

                #email1 = email_element.inner_text()
                #print(f"البريد الإلكتروني الحقيقي: {email1}")
                print(Fore.GREEN + email1)
                return email1
            
            except Exception as e:
                print(f"حدث خطأ أثناء معالجة email: {str(e)}")
                retries -= 1
                page.reload()
                page.wait_for_load_state()
                #time.sleep(5)

        raise Exception("لم يتم العثور على OTP بعد عدة محاولات.")






    from playwright.sync_api import expect




    def get_verification_code_from_email(page):
        retries = 5
        while retries > 0:

            try:
                page.wait_for_load_state()
                # افتح الرسالة
                page.locator("button.openMessage:has-text('Apple')").click(timeout=60000)
                page.wait_for_load_state()
                # ننتظر الـ iframe لحد ما يبقى موجود في DOM (حتى لو مخفي)
                page.wait_for_selector("#messageIframe", state="attached", timeout=60000)
                page.wait_for_load_state()
                # استخدام frame_locator للوصول للعنصر
                iframe_locator = page.frame_locator("#messageIframe")
                page.wait_for_load_state()
                # تحديد العنصر اللي فيه الكود داخل الـ iframe
                otp_element = iframe_locator.locator("xpath=/html/body/div/div/div[2]/div/div/p/b")
                page.wait_for_load_state()
                # ننتظر لحد ما يظهر الكود
                expect(otp_element).to_be_visible(timeout=60000)

                # نطبع الكود
                otp = otp_element.inner_text()
                print(f"🔐 code: {otp}")
                return otp
            
            except Exception as e:
                print(f"🚫 خطأ أثناء استخراج الكود: {str(e)}")
                retries -= 1
                page.reload()
                page.wait_for_load_state()
                time.sleep(6)

        raise Exception("لم يتم العثور على OTP بعد عدة محاولات.")












  

    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        ##print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                        email = tempmail(page)




                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)




                        try:
                            success_flag = process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

                             
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
    




#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



def Creat_temporary_mail():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")








    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator

    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")





#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()



















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()









#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False


                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:
                otp_code = get_verification_code_from_email(page)
                print(Fore.CYAN + f"\n✅ Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_email()
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        Reset()
                        run_spoof_all_console()

                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)


            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------

            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)
 

            Reset()
            run_spoof_all_console()

            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   
            return False




    # توليد اسم مستخدم عشوائي بالكامل
    def generate_username(length=12):
        return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))
    



    def tempmail(page):

        retries = 5
        while retries > 0:
            try:

                username = generate_username()

                # فتح الموقع
                page.goto('https://temporary-mail.net/change')
                page.wait_for_load_state()

                import random

                domains = ["mediaeast.uk", "swagpapa.com"]
                selected_domain = random.choice(domains)

                print(f"🔀{selected_domain}")




                # تعبئة البيانات
                page.locator('input#username').fill(username)
                page.locator('#domain').select_option(value=selected_domain)

                # الضغط على زر submit
                page.locator('#submitBtn').click()

                # انتظار تحميل الإيميل
                page.wait_for_selector('#active-mail', timeout=20000)
                # عدد المحاولات التي سيتم تنفيذها
                max_retries = 3

                attempt = 0
                email1 = None

                # محاولة لاستخراج الإيميل عدة مرات
                while attempt < max_retries:
                    email1 = page.locator('#active-mail').get_attribute('value')
                    print(f"📧{attempt + 1}")  # طباعة الإيميل المحاول

                    # الانتظار لبضع ثواني بعد كل محاولة
                    time.sleep(1)

                    # التحقق من إذا كان الإيميل يحتوي على الدومين الصحيح
                    if email1 and selected_domain in email1:
                        print("")
                        break  # الخروج من الحلقة إذا تم العثور على الدومين الصحيح

                    attempt += 1
                    if attempt < max_retries:
                        print(f"{attempt + 1}/{max_retries}.")
                    else:
                        print("")

                # بعد المحاولات، إذا تم العثور على الدومين الصحيح، طباعة النتيجة النهائية
                if email1 and selected_domain in email1:
                    print("")
                else:
                    print("")

                # # انتظار ظهور العنصر الذي يحتوي على البريد الإلكتروني
                # page.wait_for_selector("#emailAddress")

                # email_element = page.locator("#emailAddress")
                # email1 = email_element.inner_text()

                #email1 = email_element.inner_text()
                #print(f"البريد الإلكتروني الحقيقي: {email1}")
                print(Fore.GREEN + email1)
                return email1
            
            except Exception as e:
                print(f"حدث خطأ أثناء معالجة email: {str(e)}")
                retries -= 1
                page.reload()
                page.wait_for_load_state()
                #time.sleep(5)

        raise Exception("لم يتم العثور على OTP بعد عدة محاولات.")









    def get_verification_code_from_email(page):
        retries = 5
        while retries > 0:
            try:
                #print("📨 في انتظار رسالة Apple...")
                page.wait_for_load_state()
                page.wait_for_selector("a:has-text('Verify your Apple Account email address.')", timeout=60000)
                page.locator("a:has-text('Verify your Apple Account email address.')").click()
                # انتظار ظهور iframe باستخدام CSS selector أو XPath
                #print("انتظار ظهور iframe...")

                iframe_locator = page.frame_locator("xpath=/html/body/section[2]/div/div/div[5]/div[1]/div[3]/iframe")  # تحديد iframe بناءً على الكلاس أو معرّف آخر

                # التفاعل مباشرة مع كائن FrameLocator    //html/body/div/div/div[2]/div/div/p/b      xpath=/html/body/div/div/div[2]/div/div/p/b
                #print("استخراج محتوى الرسالة من داخل iframe...")
                otp_element = iframe_locator.locator("xpath=/html/body/div/div/div/div[2]/div/div/p/b")  # XPath الخاص بالكود داخل الإطار 

                #استخراج النص من العنصر
                otp = otp_element.inner_text()  # استخراج النص من العنصر
                print(f"🔐 code:  {otp}")
                return otp
            
            except Exception as e:
                print(f"🚫 Error while extracting the code: {str(e)}")

                retries -= 1
                page.reload()
                page.wait_for_load_state()
                time.sleep(2)

        raise Exception("Failed to find the OTP after multiple attempts.")














  

    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        ##print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                        email = tempmail(page)




                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)




                        try:
                            success_flag = process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

                             
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        


#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







def Creat_temp_mail_rip():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")









    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")



#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()






















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()






#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False


                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:
                otp_code = get_verification_code_from_email()
                print(Fore.CYAN + f"\n✅ Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_email()
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------

                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        Reset()
                        run_spoof_all_console()


                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------

            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   
            return False







    def get_email_and_create_account(page):
        retries = 5
        while retries > 0:
            try: 
                page.goto('https://tempmail.rip/')
                page.wait_for_load_state()

                # انتظار ظهور العنصر الذي يحتوي على البريد الإلكتروني
                page.wait_for_selector("#email_id")

                email_element = page.locator("#email_id")
                email1 = email_element.inner_text()

                #email1 = email_element.inner_text()
                #print(f"البريد الإلكتروني الحقيقي: {email1}")
                print(email1)

                return email1
            
            except Exception as e:
                print(f"An error occurred while processing email: {str(e)}")

                retries -= 1
                page.reload()
                page.wait_for_load_state()
                #time.sleep(5)

        raise Exception("OTP was not found after several attempts.")


    def get_verification_code_from_email(page):
        retries = 5
        while retries > 0:
            try:
                #print("📨 في انتظار رسالة Apple...")
                page.wait_for_load_state()

                # انتظار ظهور iframe باستخدام CSS selector أو XPath
                #print("انتظار ظهور iframe...")
                iframe_locator = page.frame_locator("xpath=/html/body/div[1]/main/div[1]/div[1]/div/div/div[2]/div[2]/div[3]/iframe")  # تحديد iframe بناءً على الكلاس أو معرّف آخر
                
                # التفاعل مباشرة مع كائن FrameLocator    //html/body/div/div/div[2]/div/div/p/b      xpath=/html/body/div/div/div[2]/div/div/p/b
                #print("استخراج محتوى الرسالة من داخل iframe...")
                otp_element = iframe_locator.locator("xpath=/html/body/div/div/div[2]/div/div/p/b")  # XPath الخاص بالكود داخل الإطار 

                #استخراج النص من العنصر
                otp = otp_element.inner_text()  # استخراج النص من العنصر
                print(f"🔐 code:  {otp}")
                return otp
            
            except Exception as e:
                print(f"🚫 Error while extracting the code: {str(e)}")

                retries -= 1
                page.reload()
                page.wait_for_load_state()
                time.sleep(2)

        raise Exception("Failed to find the OTP after multiple attempts.")














  

    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        ##print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)

                        email = get_email_and_create_account()



                        try:
                            success_flag = process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

                             
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        








#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







def Creat_10minutemail():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")






    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator

    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")







#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()






















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()







#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:  
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:
                otp_code = get_verification_code_from_email()
                print(Fore.CYAN + f"\n✅ Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_email()
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------

                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()
                        Reset()
                        run_spoof_all_console()



                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)


            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------

            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()


 
            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return False





    import urllib.request
    import time
    import json
    import re
    from colorama import init, Fore

    init(autoreset=True)

    FAKE_REQUEST_HEADERS = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
    }


    class TenMinuteMailer:
        def __init__(self):
            self.SIDCookie = ""
            self.email = ""
            self.start_count = 0

        def get10MinuteMail(self):
            req = urllib.request.Request(
                "https://10minutemail.com/session/address",
                headers=FAKE_REQUEST_HEADERS,
            )
            with urllib.request.urlopen(req) as response:
                jsonResponse = response.read().decode("utf-8")
                self.SIDCookie = response.info().get_all("Set-Cookie")[0]
                self.email = json.loads(jsonResponse)["address"]
            return self.email

        def get_message_count(self):
            try:
                response = self.doApiRequest("messages/messageCount")
                return int(json.loads(response)["messageCount"])
            except:
                return 0

        def getMessagesAfter(self, messageID):
            message = self.doApiRequest(f"messages/messagesAfter/{messageID}", True)
            return json.loads(message)

        def renewInterval(self):
            self.doApiRequest("session/reset", True)

        def doApiRequest(self, apiEndpoint: str, printOkay: bool = False):
            req = urllib.request.Request(
                f"https://10minutemail.com/{apiEndpoint}", headers=FAKE_REQUEST_HEADERS
            )
            req.add_header("Accept", "application/json, text/javascript, */*")
            req.add_header("Connection", "keep-alive")
            if self.SIDCookie != "":
                req.add_header("cookie", self.SIDCookie)

            with urllib.request.urlopen(req) as response:
                message = response.read().decode("utf-8")

            return message


    def extract_otp_from_html(html):
        match = re.search(r"<b>(\d{6})</b>", html)
        if match:
            return match.group(1)
        return None


    mailer = TenMinuteMailer()  # نحتاجه متاح للوظيفتين

    def get_email_and_create_account():
        email = mailer.get10MinuteMail()
        mailer.start_count = mailer.get_message_count()
        print(Fore.GREEN + f"📨 New email: {email}")
        # هنا ممكن تضيف الكود الخاص بإنشاء الحساب باستخدام الإيميل
        return email


    def get_verification_code_from_email():
        for i in range(25):  # 3 ثواني × 40 = 120 ثانية
            time.sleep(3)
            current_count = mailer.get_message_count()
            if current_count > mailer.start_count:
                messages = mailer.getMessagesAfter(mailer.start_count)
                for message in messages:
                    if "apple" in message["subject"].lower():
                        otp = extract_otp_from_html(message["bodyHtmlContent"])
                        if otp:
                            return otp
                        else:
                            print(Fore.RED + "Message received but no OTP found.")
                            return None
                #break
            else:
                print(Fore.LIGHTBLACK_EX + f"[*] Still waiting... ({i + 1}/40)")
        else:
            print(Fore.RED + "\n[✘] No messages received after waiting.")
            return None


  

    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        ##print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)

                        email = get_email_and_create_account()



                        try:
                            success_flag = process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

                             
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        

#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








def Creat_smsbower_gmail():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL









#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")









    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator

    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")




#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

























    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(mail_id, gmail_manager, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        
                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()






#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:
                gmail_manager = GmailManager()
                otp_code = gmail_manager.get_otp_for_email(mail_id)

                if otp_code:
                    print(GREEN + f"🔑 OTP received: {otp_code}")
                else:
                    print(RED + "❌ Failed to retrieve OTP.")

                    
                print(Fore.CYAN + f"\n✅ Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_email()
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------

                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()
                        Reset()
                        run_spoof_all_console()



                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            gmail_manager = GmailManager()
            gmail_manager.mark_email_as_done(mail_id)
            log_file = ["codes.txt"]

            for file in log_file:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")
                
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)


            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------

            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()


 
            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return False













    from datetime import datetime, timedelta
    import time
    import requests
    import os
    from colorama import Fore, init

    # Initialize colorama
    init(autoreset=True)
    with open("input/smsbower_key.txt", "r") as file:
        API_KEY = file.read().strip()

    # Constants
    #API_KEY = "MDpotdIVSEsOzfwETAdkC0j7ZRywQlbC"
    SERVICE = "wx"  # Apple
    DOMAIN = "gmail.com"
    BASE_URL = "https://smsbower.online/api/mail"
    CODES_FILE = "codes.txt"
    EMAILS_FILE = "input/emails.txt"

    # Colors
    GREEN = Fore.GREEN
    CYAN = Fore.CYAN
    RED = Fore.RED
    YELLOW = Fore.YELLOW
    BLUE = Fore.BLUE


    class GmailManager:
        def __init__(self):
            self.existing_codes = self.load_existing_codes()

        def load_existing_codes(self):
            if not os.path.exists(CODES_FILE):
                return set()
            with open(CODES_FILE, 'r') as f:
                return set(f.read().splitlines())

        def save_code(self, code):
            with open(CODES_FILE, 'a') as f:
                f.write(code + '\n')
            print(GREEN + f"💾 Code saved: {code}")

        def save_email(self, mail, mail_id):
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            with open(EMAILS_FILE, 'a') as f:
                f.write(f"{mail}|{mail_id}|{timestamp}|pending\n")
            print(GREEN + f"💾 Email saved: {mail} (ID: {mail_id}) at {timestamp}")

        def load_pending_email(self):
            """Load first valid pending email, else return None."""
            if not os.path.exists(EMAILS_FILE):
                return None, None

            now = datetime.now()
            valid_lines = []
            selected_mail = None
            selected_mail_id = None

            with open(EMAILS_FILE, 'r') as f:
                lines = f.read().splitlines()

            for line in lines:
                parts = line.strip().split('|')
                if len(parts) == 4:
                    mail, mail_id, timestamp_str, status = parts
                    if status == 'pending':
                        try:
                            timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                            age = now - timestamp
                            if age <= timedelta(minutes=25):
                                if not selected_mail:
                                    selected_mail = mail
                                    selected_mail_id = mail_id
                                valid_lines.append(line)
                            else:
                                print(RED + f"⌛ Email expired ({age}), removing: {mail}")
                        except ValueError:
                            print(RED + "❌ Invalid timestamp format, skipping email.")
                    else:
                        valid_lines.append(line)
                else:
                    print(RED + "❌ Invalid line format, skipping.")

            # Rewrite valid emails only
            with open(EMAILS_FILE, 'w') as f:
                for valid_line in valid_lines:
                    f.write(valid_line + '\n')

            return selected_mail, selected_mail_id

        def mark_email_as_done(self, mail_id):
            if not os.path.exists(EMAILS_FILE):
                return
            with open(EMAILS_FILE, 'r') as f:
                lines = f.readlines()
            with open(EMAILS_FILE, 'w') as f:
                for line in lines:
                    if f"|{mail_id}|" in line and line.strip().endswith("pending"):
                        line = line.replace('pending', 'done')
                    f.write(line)

        def remove_invalid_email(self, mail_id):
            if not os.path.exists(EMAILS_FILE):
                return
            with open(EMAILS_FILE, 'r') as f:
                lines = f.readlines()
            with open(EMAILS_FILE, 'w') as f:
                for line in lines:
                    if f"|{mail_id}|" not in line:
                        f.write(line)

        def get_price_rests(self):
            url = f"{BASE_URL}/getPriceRests?api_key={API_KEY}&service={SERVICE}&domain={DOMAIN}"
            response = requests.get(url)
            return response.json()

        def get_activation(self):
            url = f"{BASE_URL}/getActivation?api_key={API_KEY}&service={SERVICE}&domain={DOMAIN}"
            response = requests.get(url)
            return response.json()

        def get_code(self, mail_id):
            url = f"{BASE_URL}/getCode?api_key={API_KEY}&mailId={mail_id}"
            response = requests.get(url)
            return response.json()

        def set_status(self, mail_id, status):
            url = f"{BASE_URL}/setStatus?api_key={API_KEY}&id={mail_id}&status={status}"
            response = requests.get(url)
            return response.json()

        def attempt_to_buy_gmail(self):
            print(BLUE + "🛒 Attempting to buy Gmail...")
            activation = self.get_activation()
            if activation.get("status") != 1:
                error = activation.get("error", "Unknown error")
                print(RED + f"❌ Activation Error: {error}")
                return None, None
            mail = activation.get("mail")
            mail_id = activation.get("mailId")
            self.save_email(mail, mail_id)
            print(GREEN + f"📧 Email bought: {mail} (ID: {mail_id})")
            return mail, mail_id

        def wait_for_verification_code(self, mail_id):
            print(CYAN + "⌛ Waiting for code...")
            attempts = 0
            while attempts < 20:
                code_response = self.get_code(mail_id)
                if code_response.get("status") == 1:
                    code = code_response.get("code")
                    print(GREEN + f"✅ Code received: {code}")
                    self.save_code(code)
                    self.set_status(mail_id, 3)
                    #self.mark_email_as_done(mail_id)
                    return code
                else:
                    print(YELLOW + "⌛ Still waiting...")
                time.sleep(5)
                attempts += 1

            print(RED + "❌ Code not received, cancelling...")
            self.set_status(mail_id, 2)
            self.remove_invalid_email(mail_id)
            return None

        def get_or_buy_email(self):
            """Load email if valid, else buy a new one."""
            mail, mail_id = self.load_pending_email()
            if mail and mail_id:
                return mail, mail_id

            # لو لم نجد إيميل صالح ➔ نشتري جديد
            mail, mail_id = self.attempt_to_buy_gmail()
            if mail and mail_id:
                return mail, mail_id
            return None, None

        def get_otp_for_email(self, mail_id):
            return self.wait_for_verification_code(mail_id)















  

    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()



                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]


                    faker = Faker('en_US')
                    # اختيار عنوان عشوائي من نيويورك


                    # تعيين العنوان بناءً على الدولة المختارة
                    # تعيين العنوان بناءً على الدولة المختارة
                    address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                    try:
                        if selected_country == "United States":
                            address_data1 = random.choice(new_york_addresses)

                        elif selected_country == "Egypt":
                            address_data1 = random.choice(egypt_addresses)

                        elif selected_country == "South Africa":
                            address_data1 = random.choice(south_africa_addresses)

                        elif selected_country == "Hong Kong":
                            address_data1 = random.choice(hong_kong_addresses)

                        elif selected_country == "Germany":
                            address_data1 = random.choice(germany_addresses)

                        elif selected_country == "France":
                            address_data1 = random.choice(france_addresses)

                        elif selected_country == "Canada":
                            address_data1 = random.choice(canada_addresses)

                        elif selected_country == "Indonesia":
                            address_data1 = random.choice(indonesia_addresses)

                        elif selected_country == "Netherlands":
                            address_data1 = random.choice(netherlands_addresses)

                        elif selected_country == "Mexico":
                            address_data1 = random.choice(mexico_addresses)

                        elif selected_country == "Kazakhstan":
                            address_data1 = random.choice(kazakhstan_addresses)

                        elif selected_country == "Japan":
                            address_data1 = random.choice(japan_addresses)

                        elif selected_country == "Nigeria":
                            address_data1 = random.choice(nigeria_addresses)

                        elif selected_country == "Slovenia":
                            address_data1 = random.choice(slovenia_addresses)

                        elif selected_country == "Slovakia":
                            address_data1 = random.choice(slovakia_addresses)

                        elif selected_country == "Spain":
                            address_data1 = random.choice(spain_addresses)

                        elif selected_country == "Thailand":
                            address_data1 = random.choice(thailand_addresses)

                        elif selected_country == "United Kingdom":
                            address_data1 = random.choice(uk_addresses)

                        elif selected_country == "Bolivia":
                            address_data1 = random.choice(bolivia_addresses)

                        elif selected_country == "Italy":
                            address_data1 = random.choice(italy_addresses)

                        else:
                            print("No matching country found.")
                            address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                    except Exception as e:
                        print(f"Error occurred: {e}")
                        address_data1 = None


                    # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                    if address_data1:
                        address_data = address_data1
                        print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                    else:
                        print("No address data selected.")

                    # توليد باقي العنوان باستخدام Faker
                    street = faker.street_address()
                    full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                    # ✅ 1. خزّن الاسم الأول والاسم الأخير
                    first_name = faker.first_name()
                    last_name = faker.last_name()

                    # ✅ 2. ركّب الاسم الكامل
                    full_name = f"{first_name} {last_name}"
                    ##print("👤 Name:  " + Fore.YELLOW + f"{full_name}")




                    # --- Main Program ---
                    gmail_manager = GmailManager()

                    # Step 1: Load or buy email
                    email, mail_id = gmail_manager.get_or_buy_email()

                    if email and mail_id:
                        print(GREEN + f"📧 Email ready: {email}")            

                        


                        # Use the email (مثلاً تدخل بيانات - تسجل به...)
                        # do_stuff_with_email(mail)

                        # Step 2: Later, when ready, get OTP


                    else:
                        print(RED + "❌ No valid email found or bought.")





                    try:
                        success_flag = process_account(mail_id, gmail_manager, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                        if not success_flag:
                            #log_error(account)
                            continue  # الانتقال للحساب التالي

                        #Reset()

                        # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                        #time.sleep(3)

                        # # المسار الأساسي
                        # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                        # try:
                        #     for item in os.listdir(base_path):
                        #         item_path = os.path.join(base_path, item)

                        #         if item == "Settings":
                        #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                        #             continue

                        #         if os.path.isdir(item_path):
                        #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                        #             for sub_item in os.listdir(item_path):
                        #                 sub_item_path = os.path.join(item_path, sub_item)
                        #                 if os.path.isdir(sub_item_path):
                        #                     shutil.rmtree(sub_item_path)
                        #                 else:
                        #                     os.remove(sub_item_path)
                        #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                        #         elif os.path.isfile(item_path):
                        #             os.remove(item_path)
                        #             print(f"🧹 تم حذف الملف: {item}")

                        #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                        #     time.sleep(2)

                        # except Exception as e:
                        #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                    except Exception as e:
                        print(Fore.RED +f"Failed to process the account {email}: {e}")

                        continue  # الانتقال للحساب التالي


            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        







#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



def Creat_temp_mail_gw():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")




#/-/----////////////////-----------------------------------------------------------------------------
#/-/----////////////////-----------------------------------------------------------------------------
#/-/----////////////////-----------------------------------------------------------------------------






















#/-/----////////////////-----------------------------------------------------------------------------
#/-/----////////////////-----------------------------------------------------------------------------
#/-/----////////////////-----------------------------------------------------------------------------
#/-/----////////////////-----------------------------------------------------------------------------
#/-/----////////////////-----------------------------------------------------------------------------
   
   
   
   
   
   
    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break










    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")






#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()



















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password,password_gw,token, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            #time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            time.sleep(0.2)
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()







#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        ##print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                #print(f"")
                print("")



            try:
                otp_code = get_verification_code_from_email(token)  # جلب الكود من الرسائل
                print(f"Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_tempmail(page)
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()
                        Reset()
                        run_spoof_all_console()



                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False

    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------



            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)
            
            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------

            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return False




#/////////////////////////////////////////////////////////////////////
    import string

    BASE_URL = "https://api.mail.gw"

    # توليد اسم مستخدم عشوائي بالكامل
    def generate_username(length=12):
        return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

    # توليد باسورد عشوائي
    def generate_password(length=10):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

    # عرض جميع الدومينات والاختيار منها
    def get_domains():
        response = requests.get(f"{BASE_URL}/domains")
        response.raise_for_status()
        domains = response.json()["hydra:member"]
        return [d["domain"] for d in domains]

    # إنشاء حساب جديد
    def create_account(email, password_gw):
        response = requests.post(f"{BASE_URL}/accounts", json={
            "address": email,
            "password": password_gw
        })
        if response.status_code == 201:
            print(Fore.GREEN + "[✔] Account Created Successfully")
        elif "exists" in response.text:
            print(Fore.YELLOW + "[!] Account already exists")
        else:
            print(Fore.RED + "[✘] Failed to create account:", response.text)
        return response

    def get_email_and_create_account(chosen_domain):
        username = generate_username()
        password_gw = generate_password()
        email = f"{username}@{chosen_domain}"

        print(Fore.CYAN + f"\nGenerated Email: {Fore.BLUE}{email}")
        print(Fore.MAGENTA + f"Generated Password: {password_gw}")

        create_account(email, password_gw)
        
        return email, password_gw



#/////////////////////////////////////////////////////////////////////


    # تسجيل الدخول
    def login(email, password_gw):
        response = requests.post(f"{BASE_URL}/token", json={
            "address": email,
            "password": password_gw
        })
        response.raise_for_status()
        return response.json()["token"]

    # جلب جميع الرسائل
    def get_messages(token):
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/messages", headers=headers)
        response.raise_for_status()
        return response.json()["hydra:member"]

    # جلب تفاصيل رسالة معينة
    def get_message_detail(token, msg_id):
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/messages/{msg_id}", headers=headers)
        response.raise_for_status()
        return response.json()

    # جلب الكود من الرسائل
    def get_verification_code_from_email(token):
        print(Fore.YELLOW + "\n[!] Waiting for incoming emails...\n")

        # التحقق من الرسائل كل 3 ثواني
        for _ in range(25):
            time.sleep(3)
            messages = get_messages(token)
            if messages:
                msg = messages[0]
                details = get_message_detail(token, msg["id"])
                text = details.get("text", "")
                match = re.search(r'\b\d{6}\b', text)
                if match:
                    print(Fore.LIGHTGREEN_EX + Style.BRIGHT + f"\n✅ Verification Code: {match.group()}")
                    return match.group()
                else:
                    print(Fore.RED + "[!] Message received but no verification code found.")
                    break
            else:
                print(Fore.LIGHTBLACK_EX + "[*] Still waiting...")

        else:
            print(Fore.RED + "\n[✘] No messages received after waiting.")












    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        ##print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            ##print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            ##print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            ##print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

            
        print(Fore.CYAN + "\n[+] Fetching available domains...")
        domains = get_domains()

        print(Fore.LIGHTCYAN_EX + "\nAvailable Domains:")
        for i, d in enumerate(domains):
            print(Fore.LIGHTBLUE_EX + f"{i+1}. {d}")

        choice = int(input(Fore.YELLOW + "\nEnter domain number: ")) - 1
        chosen_domain = domains[choice]




        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)

                        #email = tempmail(page)

                        email, password_gw = get_email_and_create_account(chosen_domain)  # جلب الإيميل وإنشاء الحساب
                        token = login(email, password_gw)  # تسجيل الدخول


                        try:
                            success_flag = process_account(page, email, password,password_gw,token, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)       
    if __name__ == "__main__":
        main()
        
























#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






def Creat_tempmail_lol():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )



#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]





#////////////////////////////////////////////////////////////////////////////////





    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")






    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break










    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")

    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator

    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")

#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------



    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()










    #-------------------------------------------------------------------------------------------------------------------------------------------

    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email , inbox , password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            
                            

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

























            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()







#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:
                otp_code = get_verification_code_from_email(inbox)
                print(Fore.CYAN + f"\n✅ Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_email()
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        


            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)

                        Reset()
                        run_spoof_all_console()

                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()
                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------


            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   

            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------


            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)
 

            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return False

#/////////////////////////////////////////////////////////////////////////////////////////////////







    from TempMail import TempMail

    init(autoreset=True)

    api_key = "tempmail.20250422.qa4u07gzpkkyzx400msg84835acp3d01v5kjyc8385gbozd3"
    tmp = TempMail(api_key)

    # رجعنا inbox مع الإيميل نفسه بدل الاعتماد على global
    def get_email_and_create_account():
        retries = 5
        for attempt in range(1, retries + 1):
            try:
                inbox = tmp.createInbox()
                print(f"📧 Generated Email: {inbox.address}")
                return inbox  # رجّع الكائن نفسه، مش address بس
            except Exception as e:
                error_message = str(e)
                print(f"❌ Error creating inbox (Attempt {attempt}): {error_message}")
                if "country you are requesting from" in error_message and "403" in error_message:
                    print("🔄 VPN change required due to country restriction.")
                    api_instance = ExpressVpnApi()
                    connect_vpn(api_instance)
                    #time.sleep(5)
                else:
                    time.sleep(3)
        raise Exception("❌ Failed to create email inbox after multiple attempts.")


    def get_verification_code_from_email(inbox):
        print("⏳ Waiting for message...")
        for i in range(25):  # 40 * 5 = 200 ثانية انتظار كحد أقصى
            try:
                emails = tmp.getEmails(inbox.token)
                if emails:
                    print(f"📨 Total Messages: {len(emails)}")
                    for email in emails:
                        if "apple" in email.subject.lower():
                            match = re.search(r'\b\d{6}\b', email.body)
                            if match:
                                return match.group()
                            else:
                                print(Fore.RED + "❌ Apple email received but no OTP found.")
                                return None
                    print("📭 No Apple message yet, retrying in 3 seconds...")
                else:
                    print("🔄 No messages yet, retrying in 3 seconds...")
            except Exception as e:
                print(Fore.RED + f"❌ Error: {e}")
            time.sleep(3)
        return None






#/////////////////////////////////////////////////////////////////////////////////////////////////






  

    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()

                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]



                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك



                        #address_data = random.choice(new_york_addresses)
                        


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")


                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)

                        inbox = get_email_and_create_account()
                        email = inbox.address


                        try:
                            success_flag = process_account(page , email,inbox, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    


                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        



#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








def Creat_temp_mail_email():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json
    from playwright.sync_api import expect

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")









    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")




#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()





















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)
        #time.sleep(50)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()







#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False


                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:

                
                otp_code = get_verification_code_from_tempmail(page)
                print(Fore.CYAN + f"\n✅ Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_email()
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------

                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        Reset()
                        run_spoof_all_console()


                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------

            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   



            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   
            return False







    def get_email_and_create_account(page):
        retries = 5
        while retries > 0:
            try: 
                page.goto('https://temp-mail-email.org/')
                page.wait_for_load_state()
                email1 = page.locator("#temp-mail").input_value()
                #print(email1)

                # # انتظار ظهور العنصر الذي يحتوي على البريد الإلكتروني
                # page.wait_for_selector("#emailAddress")

                # email_element = page.locator("#emailAddress")
                # email1 = email_element.inner_text()

                #email1 = email_element.inner_text()
                #print(f"البريد الإلكتروني الحقيقي: {email1}")
                print(Fore.GREEN + email1)
                return email1
            
            except Exception as e:
                print(f"An error occurred while processing email: {str(e)}")

                retries -= 1
                page.reload()
                page.wait_for_load_state()
                #time.sleep(5)

        raise Exception("OTP was not found after several attempts.")

    def get_verification_code_from_tempmail(page):

        retries = 5
        while retries > 0:
        # يمكنك استخدام الـ selector الخاص بـ <td> أو النص الذي بداخله
        #page.click('td:text("appleid@id.apple.com")')  # استخدام نص البريد الإلكتروني لتحديد العنصر

        # أو إذا كان لديك HTML إضافي مثل <a> حول البريد الإلكتروني
            try:
                page.wait_for_load_state()
                # افتح الرسالة
                page.locator('td:text("appleid@id.apple.com")').click(timeout=60000)
                page.wait_for_load_state()
                # # ننتظر الـ iframe لحد ما يبقى موجود في DOM (حتى لو مخفي)
                # page.wait_for_selector("#messageIframe", state="attached", timeout=60000)
                # page.wait_for_load_state()
                # # استخدام frame_locator للوصول للعنصر
                # iframe_locator = page.frame_locator("#messageIframe")
                # page.wait_for_load_state()
                # تحديد العنصر اللي فيه الكود داخل الـ iframe
                otp_element = page.locator("xpath=/html/body/main/div[2]/div/div/div/div/div[2]/div/div[2]/div/div/p/b")
                page.wait_for_load_state()
                # ننتظر لحد ما يظهر الكود
                expect(otp_element).to_be_visible(timeout=60000)

                # نطبع الكود
                otp = otp_element.inner_text()
                print(f"🔐 code: {otp}")
                return otp
            
            except Exception as e:
                print(f"🚫 خطأ أثناء استخراج الكود: {str(e)}")
                retries -= 1
                page.reload()
                page.wait_for_load_state()
                time.sleep(6)

        raise Exception("لم يتم العثور على OTP بعد عدة محاولات.")














  

    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        ##print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)

                        email = get_email_and_create_account(page)



                        try:
                            success_flag = process_account(page, email, password, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

                             
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()











#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








def Creat_temp_mail_tm():




    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import sys
    import ctypes
    import uuid
    import winreg
    import threading
    import time
    import keyboard




    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////


    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")








    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break







    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-


    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator

    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")





#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()


















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page, email, password,password_gw,token, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email)


        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)
                    #time.sleep(1)
                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')


                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()







#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False




                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                        ok_button = auto.ButtonControl(Name="OK")
                        
                        if ok_button.Exists(1, 1):  # التأكد من وجود الزر
                            #print("✅ Found زر OK.")
                            invoke = ok_button.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر OK.")
                            else:
                                print("")

                        else:
                            print("")
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")


                except Exception as e:
                    print("")
                
            except Exception as e:
                print(f" {e}")
                Reset()
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except Exception as e:
                print(f"")



            try:
                otp_code = get_verification_code_from_email(token)  # جلب الكود من الرسائل
                print(f"Verification Code: {otp_code}")
                # جلب كود OTP
                #otp_code = get_verification_code_from_tempmail(page)
                if not otp_code or not otp_code.strip():
                    raise Exception("❌ OTP code is empty or not retrieved.")
                #print(f"✅ OTP اللي جالك: {otp_code}")

                # إدخال كود OTP
                otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                if otp_input.Exists(25, 1):
                    try:
                        otp_input.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                        time.sleep(0.2)  # تأخير بسيط عشان ياخد التركيز تماماً
                        value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(otp_code)
                            #print("✅ تم إدخال كود OTP في الحقل.")
                        else:
                            print("")
                    except Exception as e:
                        print(f"")
                else:
                    print("")

                # الضغط على زر Verify
                verify_btn = auto.ButtonControl(Name='Verify')
                if verify_btn.Exists(4, 1):
                    #print("✅ الزر Verify موجود، هيتم الضغط عليه...")
                    invoke = verify_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على زر Verify.")
                    else:
                        print("")

                else:
                    print("❌ الزر Verify مش موجود.")

                # الانتظار لظهور نتيجة التحقق
                time.sleep(1)

            except Exception as e:
                print(f"❌ خطأ نهائي: {e}")
                Reset()
                return False
            


        

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        Reset()
                        run_spoof_all_console()

                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print("")

            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email, password, phone, otp_link)  # استدعاء success بدون output_file
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------


            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   

            return True
        except Exception as e:
            print(Fore.RED +f"Error while updating files: {e}")

            # ----------- التنفيذ الرئيسي -----------


            #time.sleep(50)
            api_instance = ExpressVpnApi()
            connect_vpn(api_instance)

            Reset()
            run_spoof_all_console()



            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   


            return False




#/////////////////////////////////////////////////////////////////////
    import string

    BASE_URL = "https://api.mail.tm"

    # توليد اسم مستخدم عشوائي بالكامل
    def generate_username(length=12):
        return ''.join(random.choices(string.ascii_lowercase + string.digits, k=length))

    # توليد باسورد عشوائي
    def generate_password(length=10):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

    # عرض جميع الدومينات والاختيار منها
    def get_domains():
        response = requests.get(f"{BASE_URL}/domains")
        response.raise_for_status()
        domains = response.json()["hydra:member"]
        return [d["domain"] for d in domains]

    # إنشاء حساب جديد
    def create_account(email, password_gw):
        response = requests.post(f"{BASE_URL}/accounts", json={
            "address": email,
            "password": password_gw
        })
        if response.status_code == 201:
            print(Fore.GREEN + "[✔] Account Created Successfully")
        elif "exists" in response.text:
            print(Fore.YELLOW + "[!] Account already exists")
        else:
            print(Fore.RED + "[✘] Failed to create account:", response.text)
        return response

    def get_email_and_create_account(chosen_domain):
        username = generate_username()
        password_gw = generate_password()
        email = f"{username}@{chosen_domain}"

        print(Fore.CYAN + f"\nGenerated Email: {Fore.BLUE}{email}")
        print(Fore.MAGENTA + f"Generated Password: {password_gw}")

        create_account(email, password_gw)
        
        return email, password_gw



#/////////////////////////////////////////////////////////////////////


    # تسجيل الدخول
    def login(email, password_gw):
        response = requests.post(f"{BASE_URL}/token", json={
            "address": email,
            "password": password_gw
        })
        response.raise_for_status()
        return response.json()["token"]

    # جلب جميع الرسائل
    def get_messages(token):
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/messages", headers=headers)
        response.raise_for_status()
        return response.json()["hydra:member"]

    # جلب تفاصيل رسالة معينة
    def get_message_detail(token, msg_id):
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/messages/{msg_id}", headers=headers)
        response.raise_for_status()
        return response.json()

    # جلب الكود من الرسائل
    def get_verification_code_from_email(token):
        print(Fore.YELLOW + "\n[!] Waiting for incoming emails...\n")

        # التحقق من الرسائل كل 3 ثواني
        for _ in range(30):
            time.sleep(3)
            messages = get_messages(token)
            if messages:
                msg = messages[0]
                details = get_message_detail(token, msg["id"])
                text = details.get("text", "")
                match = re.search(r'\b\d{6}\b', text)
                if match:
                    print(Fore.LIGHTGREEN_EX + Style.BRIGHT + f"\n✅ Verification Code: {match.group()}")
                    return match.group()
                else:
                    print(Fore.RED + "[!] Message received but no verification code found.")
                    break
            else:
                print(Fore.LIGHTBLACK_EX + "[*] Still waiting...")

        else:
            print(Fore.RED + "\n[✘] No messages received after waiting.")












    def save_new_account(email, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"Account >>>>>> {email} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to Number_Done.csv")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW + "📦 The number " + Fore.GREEN + f"{phone} " + "has been moved to error_Number.txt")

            else:
               print(f"Error⚠️ The number {phone} is not found in input/Numbers.csv")


        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        ##print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            ##print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            ##print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            ##print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

            
        print(Fore.CYAN + "\n[+] Fetching available domains...")
        domains = get_domains()

        print(Fore.LIGHTCYAN_EX + "\nAvailable Domains:")
        for i, d in enumerate(domains):
            print(Fore.LIGHTBLUE_EX + f"{i+1}. {d}")

        choice = int(input(Fore.YELLOW + "\nEnter domain number: ")) - 1
        chosen_domain = domains[choice]




        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة


                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                    with sync_playwright() as playwright:
                        browser = playwright.chromium.launch(headless=True,
                                        args=[
                                            "--disable-blink-features=AutomationControlled",
                                            "--disable-dev-shm-usage",
                                            "--disable-gpu",
                                            "--incognito",
                                            "--disable-extensions",
                                            "--disable-setuid-sandbox",
                                            "--disable-automation",
                                            "--disable-features=IsolateOrigins,site-per-process",
                                            "--window-size=800,800",
                                            "--window-position=0,0",
                                        ],
                                    )
                        def get_random_user_agent(file_path):
                            try:
                                with open(file_path, "r", encoding="utf-8") as file:
                                    user_agents = file.readlines()
                                user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                return random.choice(user_agents) if user_agents else None
                            except Exception as e:
                                console.print(f"[red]Error reading User-Agent file: {e}")
                                return None    

                        user_agents_file = "input/user_agents.txt"
                        random_user_agent = get_random_user_agent(user_agents_file)

                        if not random_user_agent:
                            console.print("[red]There are no valid User-Agents.")
                            return

                        context = browser.new_context(accept_downloads=False,
                                                    bypass_csp=True,
                                                    user_agent=random_user_agent,
                                                    viewport={"width": 800, "height": 800},
                                                    permissions=[],
                                                    storage_state=None )
                        

                        # اعتراض طلبات الإعلانات فقط
                        context.route("**/*ads*", fake_ads)

                        page = context.new_page()

                        # تعطيل التحقق من مانع الإعلانات
                        page.add_init_script("""
                            // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                            Object.defineProperty(window, 'adblockEnabled', { value: false });

                            // إدخال عناصر إعلانات وهمية
                            var fakeAd = document.createElement('div');
                            fakeAd.className = 'ad-banner';
                            fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                            document.body.appendChild(fakeAd);
                        """)

                        faker = Faker('en_US')
                        # اختيار عنوان عشوائي من نيويورك


                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                        # توليد باقي العنوان باستخدام Faker
                        street = faker.street_address()
                        full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                        # ✅ 1. خزّن الاسم الأول والاسم الأخير
                        first_name = faker.first_name()
                        last_name = faker.last_name()

                        # ✅ 2. ركّب الاسم الكامل
                        full_name = f"{first_name} {last_name}"
                        #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                        
                                # انتظار اكتمال تحميل الصفحة
                        page.wait_for_load_state('networkidle')

                        # إزالة الإعلانات بعد التحميل
                        page.evaluate("""
                            document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                        """)

                        #email = tempmail(page)

                        email, password_gw = get_email_and_create_account(chosen_domain)  # جلب الإيميل وإنشاء الحساب
                        token = login(email, password_gw)  # تسجيل الدخول


                        try:
                            success_flag = process_account(page, email, password,password_gw,token, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                            if not success_flag:
                                #log_error(account)
                                continue  # الانتقال للحساب التالي

                            #Reset()

                            # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                            #time.sleep(3)

                            # # المسار الأساسي
                            # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                            # try:
                            #     for item in os.listdir(base_path):
                            #         item_path = os.path.join(base_path, item)

                            #         if item == "Settings":
                            #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                            #             continue

                            #         if os.path.isdir(item_path):
                            #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                            #             for sub_item in os.listdir(item_path):
                            #                 sub_item_path = os.path.join(item_path, sub_item)
                            #                 if os.path.isdir(sub_item_path):
                            #                     shutil.rmtree(sub_item_path)
                            #                 else:
                            #                     os.remove(sub_item_path)
                            #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                            #         elif os.path.isfile(item_path):
                            #             os.remove(item_path)
                            #             print(f"🧹 تم حذف الملف: {item}")

                            #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                            #     time.sleep(2)

                            # except Exception as e:
                            #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                        except Exception as e:
                            print(Fore.RED +f"Failed to process the account {email}: {e}")

                            continue  # الانتقال للحساب التالي


                        finally:
                            # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                            context.unroute("**/*ads*")
                            # إغلاق المتصفح بعد المعالجة
                            context.close()
                            browser.close()

            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    


                #break
            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)        
    if __name__ == "__main__":
        main()
        
























#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////











def Creat_gmail():
    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil
    import threading
    import time
    import keyboard



    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )







#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////




    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")







    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print("")

                else:
                    print("❌ The button is not present.")

            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break









    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-

    import os
    import sys
    import ctypes
    import subprocess
    import uuid
    import winreg
    import random
    import string
    import time

    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            #print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            #print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")






#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()


















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page,account1,email_gmail, password,password_gmail, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email_gmail)

        # ----------- التنفيذ الرئيسي -----------
        api_instance = ExpressVpnApi()
        connect_vpn(api_instance)
        #time.sleep(1)
        #time.sleep(50)

        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")


                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email_gmail, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email_gmail))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email_gmail, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()





#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed.")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        Reset()
                        return False

                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        # محاولة العثور على زر "OK"
                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")

                except:
                    print("Message not found.")
                

            except:
                print(f"❌ Error processing the number {phone}")
                
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except:
                print(f"❌ Message not found or exception occurred.")

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                try:
                    # جلب كود OTP
                    otp_code = get_code_gmail(page, email_gmail)
                    if not otp_code or not otp_code.strip():
                        print("❌ OTP code is empty or not retrieved.")
                        Reset()
                        return False

                    # إدخال كود OTP
                    otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                    if otp_input.Exists(25, 1):
                        try:
                            otp_input.SetFocus()
                            time.sleep(0.2)
                            value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(otp_code)
                            else:
                                print("❌ Field does not support ValuePattern.")
                        except:
                            print(f"❌ Exception occurred during code input.")
                    else:
                        print("❌ Code input field not found.")

                    # الضغط على زر Verify
                    verify_btn = auto.ButtonControl(Name='Verify')
                    if verify_btn.Exists(4, 1):
                        invoke = verify_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                        else:
                            print(Fore.RED + "❌ Button does not support Invoke.")
                    else:
                        print("❌ Verify button not found.")

                    # الانتظار لمدة 10 ثواني عشان نشوف إذا ظهرت رسالة فشل التحقق
                    #time.sleep(10)

                    # التحقق من ظهور رسالة "فشل التحقق"
                    message = auto.TextControl(Name="Phone code verification failed.")
                    if message.Exists(5, 1):  # يتحقق في خلال ثانيتين
                        print("❌ Phone code incorrect, retrying...")
                        Reset()
                        return False
                        

                    print("✅ Verification successful.")
                    break  # خرج من اللوب لو ما ظهرتش رسالة الفشل

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying due to error...")

            if attempt == max_attempts:
                print("❌ All attempts failed, proceeding with emergency steps...")
                # ----------- التنفيذ الرئيسي -----------
                api_instance = ExpressVpnApi()
                disconnect_vpn(api_instance)
                # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                api_instance.close()

                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   


                return False


        

 
            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")


                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        Reset()
                        run_spoof_all_console()

                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False

    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print(Fore.RED + "❌ Button does not support Invoke.")
            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("Element not found.")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("Button does not support InvokePattern.")
            #     else:
            #         print("Element not found.")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email_gmail, password, phone, otp_link)  # استدعاء success بدون output_file
            success_gmails(account1)
            #time.sleep(1)
            # ----------- التنفيذ الرئيسي -----------


            api_instance = ExpressVpnApi()
            disconnect_vpn(api_instance)
            # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
            api_instance.close()

            Reset()
            run_spoof_all_console()

            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   

            return True
        except Exception as e:
            print(f"File update error: {e}")
            # ----------- التنفيذ الرئيسي -----------


            api_instance = ExpressVpnApi()
            disconnect_vpn(api_instance)
            # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
            api_instance.close()

            Reset()
            run_spoof_all_console()


            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   

            return False









    # def get_verification_code_from_tempmail(page):

    #     retries = 5
    #     while retries > 0:
    #         try:
    #             #print("📨 في انتظار رسالة Apple...")
    #             page.wait_for_load_state()

    #             # نلاقي رسالة Apple
    #             apple_email_locator = page.locator("div.subject", has_text="Verify your Apple Account email address")
    #             if not apple_email_locator.is_visible():
    #                 print("❌ رسالة Apple مش ظهرت لسه.")
    #                 return None

    #             #print("✅ Found رسالة Apple.")

    #             # نضغط على الزر الخاص بفتح الرسالة
    #             parent_message = apple_email_locator.locator("xpath=ancestor::div[contains(@class, 'd-flex')]")
    #             open_button = parent_message.locator("button.open-message")
    #             open_button.click()

    #             # ننتظر انتقال الصفحة
    #             page.wait_for_url("**/message/**", timeout=40000)
    #             #print("📄 تم فتح الرسالة...")

    #             # انتظار ظهور iframe باستخدام CSS selector أو XPath
    #             #print("انتظار ظهور iframe...")
    #             iframe_locator = page.frame_locator("iframe.d-block")  # تحديد iframe بناءً على الكلاس أو معرّف آخر
                
    #             # التفاعل مباشرة مع كائن FrameLocator
    #             #print("استخراج محتوى الرسالة من داخل iframe...")
    #             otp_element = iframe_locator.locator("//html/body/div/div/div[2]/div/div/p/b")  # XPath الخاص بالكود داخل الإطار
    #             otp_element.wait_for(state="visible", timeout=40000)  # الانتظار حتى يصبح العنصر مرئيًا

    #             # استخراج النص من العنصر
    #             otp = otp_element.inner_text()  # استخراج النص من العنصر
    #             print(f"🔐 code:  {otp}")
    #             return otp
            
    #         except Exception as e:
    #             print(f"🚫 خطأ أثناء استخراج الكود: {str(e)}")
    #             retries -= 1
    #             page.reload()
    #             page.wait_for_load_state()
    #             time.sleep(6)

    #     raise Exception("OTP not found after several attempts.")









    # دالة لمعالجة الحسابات
    def process_gmail_account1(page, email_gmail, password_gmail ,account1 ):
            
            api_instance = ExpressVpnApi()
            disconnect_vpn(api_instance)
            # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
            api_instance.close()


            try:
                # الانتقال إلى صفحة تسجيل الدخول
                page.goto("https://accounts.google.com/signin/v2/identifier")

                # الكتابة داخل الحقل باستخدام الـ id
                page.fill('input#identifierId', email_gmail)

                # الضغط على زر التالي
                page.click('button[type="button"]:has-text("Next")')


                try:
                    page.locator("div.dMNVAe:text('Confirm you’re not a robot')").wait_for(timeout=5000)
                    print(f"Error in Password {email_gmail}")
                    log_error_gmails(account1)
                    return False
                
                except :
                    print(f"{email_gmail}")



                # إدخال كلمة المرور
                #page.fill('input[type="password_gmail"]', password)
                page.locator('input[name="Passwd"]').fill(password_gmail)

                # الضغط على زر التالي
                page.click('button[type="button"]:has-text("Next")')
    #//////////////////////////////////////////////////////////////////////////////////////////////

                try:

                    page.locator('[jsname="B34EJ"] >> text=Wrong password').wait_for(10000)
                    #page.locator('div[jsname="B34EJ"] span').wait_for(timeout=10000)
                    print(f"Error in Password {email_gmail}")
                    log_error_gmails(account1)
                    return False
                
                except:
                    print(f"{email_gmail}")



    #--------------------------------------------------------------------------


                try:
                    # انتظر ظهور العنصر اللي عليه الكلاس المحدد واضغط عليه
                    cancel_button = page.wait_for_selector(".VfPpkd-vQzf8d", timeout=5000)
                    cancel_button.click()
                    #print("Button with cancel_button clicked.")
                except:
                    print("Element not found within the timeout.")



                try:        
                    page.locator('button:has-text("Cancellation")').click(timeout=5000)

                except:
                    print(f"Error processing {email_gmail}")


                try:        
                    page.locator('button[jsname="bySMBb"]').click(timeout=1000)

                except:
                    print(f"Error processing {email_gmail}")

                page.wait_for_load_state()
                # انتظار العنصر
                page.wait_for_selector('div.WXMuEd a.RlFDUe')  # انتظر حتى يظهر العنصر
    #----------------------------------------------------------------------------


                # الانتقال إلى صفحة البريد الالكتروني
                page.goto("https://mail.google.com/mail/u/0/#inbox")
                page.wait_for_load_state()
                page.wait_for_selector('xpath=/html/body/div[6]/div[3]/div/div[2]/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div[1]/div[1]/div/div[1]/div/div/div[2]')
                print(22323)
                return True
            except:
                print(f"Error processing {email_gmail}")
                log_error_gmails(account1)
                return False
                


    #//////////////////////////////////////////////////////////////////////////////////////////////


    #//////////////////////////////////////////////////////////////////////////////////////////////
            

    def get_code_gmail(page, email_gmail):

        max_attempts = 3  # عدد المحاولات القصوى
        attempt = 0

        while attempt < max_attempts:
            
        
            try:
                page.reload()
                page.wait_for_load_state()
                # العثور على العنصر الخاص بـ Apple
                selector = '//span[@data-hovercard-id="appleid@id.apple.com"]'
                page.locator(selector).nth(1).wait_for(state="visible", timeout=10000)
                #print("Found العنصر.")
                page.locator(selector).nth(1).click()

                # انتظار ظهور الكود
                #page.locator("//*[contains(text(), 'To verify this gmail_email address belongs to you, enter the code below on the gmail_email verification page:')]")

                # العثور على الكود باستخدام XPath
                #code_element = page.locator("//*[contains(text(), 'To verify this gmail_email address belongs to you, enter the code below on the gmail_email verification page:')]/following::b[1]")
                code_element = page.locator('xpath=/html/body/div[6]/div[3]/div/div[2]/div[2]/div/div/div/div[2]/div/div[1]/div/div[2]/div/div[2]/div[2]/div/div[3]/div/div/div/div/div/div[1]/div[2]/div[3]/div[3]/div/div[1]/div[1]/div[1]/div[2]/div/div/p/b').nth(0).inner_text()
                #print("OTP:", code_element)

                # استخراج الكود
                code = code_element
                #print(f"Found الكود: {code}")

                    #حذف الرساله
                page.locator('//html/body/div[6]/div[3]/div/div[2]/div[2]/div/div/div/div[1]/div[2]/div[1]/div/div[2]/div[3]/div').wait_for(timeout=15000)
                page.locator('//html/body/div[6]/div[3]/div/div[2]/div[2]/div/div/div/div[1]/div[2]/div[1]/div/div[2]/div[3]/div').click()
            
                # ✅ إذا نجح كل شيء، يتم تسجيل الحساب كمُعالج بنجاح
                return code
            
            except:
                print(f"An error occurred while processing the account {email_gmail}")
                attempt += 1
                #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

        if attempt == max_attempts:
            print("Creation failed")
            Reset()
            return False




    def success_gmails(account1):
        """
        يحفظ الحساب في ملف done2.csv ويحذفه من ملف account1s2.csv.
        """
        try:
            with open("done.txt", 'a') as new:
                new.write(",".join(account1) + "\n")
            console.print(f"[bold green]account1 {account1[0]} : successfully Changed")

            with open("input/emails.txt", "r") as file:
                account1s = file.readlines()

            with open("input/emails.txt", "w") as file:
                for acc in account1s:
                    if ":".join(account1) not in acc.strip():
                        file.write(acc)
        except Exception as e:
            console.print(Fore.RED + f"Error in saving successful account1: {e}")


    def log_error_gmails(account1):
        """
        يسجل الحساب في ملف errors2.csv ويحذفه من ملف account1s2.csv.
        """
        try:
            with open("failed.txt", 'a') as error_file:
                error_file.write(":".join(account1) + "\n")
            console.print(f"[bold red]account1 {account1[0]} : encountered an error and was moved to errors2.csv")

            with open("input/emails.txt", "r") as file:
                account1s = file.readlines()

            with open("input/emails.txt", "w") as file:
                for acc in account1s:
                    if ":".join(account1) in acc.strip():
                        account1s.remove(acc)
                        break
                file.writelines(account1s)
        except Exception as e:
            console.print(Fore.RED + f"Error in logging error account1: {e}")






    def save_new_account(email_gmail, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email_gmail, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"  Account >>>>>> {email_gmail} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW +"📦 The number has been transferred" + Fore.GREEN + f"{phone} " + "to Number_Done.csv")
            else:
                print(f"Error⚠️ Number {phone} not found in input/Numbers.csv")

        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW +"📦 The number has been transferred" + Fore.GREEN + f"{phone} " + "to error_Number.txt")
                
            else:
                print(f"Error ⚠️ Number {phone} not found in input/Numbers.csv")

        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة



                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()



                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]

                    with open("input/emails.txt", "r", encoding="utf-8") as file:
                        account1s_raw = file.read().strip().split("\n")

                    # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                    account1s = [account1.split(":") for account1 in account1s_raw
                                if account1.strip() and len(account1.split(":")) >= 2]

                    if not account1s:
                        console.print("[bold red]❌ No valid account1s found in the file, the program will exit.")
                        break  # إنهاء الحلقة


                    
                    for account1 in account1s:
                        email_gmail = account1[0]
                        password_gmail = account1[1]
            


                        

                        os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                        with sync_playwright() as playwright:
                            browser = playwright.chromium.launch(headless=False,
                                            args=[
                                                "--disable-blink-features=AutomationControlled",
                                                "--disable-dev-shm-usage",
                                                "--disable-gpu",
                                                "--incognito",
                                                "--disable-extensions",
                                                "--disable-setuid-sandbox",
                                                "--disable-automation",
                                                "--disable-features=IsolateOrigins,site-per-process",
                                                "--window-size=800,800",
                                                "--window-position=0,0",
                                            ],
                                        )
                            def get_random_user_agent(file_path):
                                try:
                                    with open(file_path, "r", encoding="utf-8") as file:
                                        user_agents = file.readlines()
                                    user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                    return random.choice(user_agents) if user_agents else None
                                except Exception as e:
                                    console.print(f"[red]Error reading User-Agent file: {e}")
                                    return None    

                            user_agents_file = "input/user_agents.txt"
                            random_user_agent = get_random_user_agent(user_agents_file)

                            if not random_user_agent:
                                console.print("[red]There are no valid User-Agents.")
                                return

                            context = browser.new_context(accept_downloads=False,
                                                        bypass_csp=True,
                                                        user_agent=random_user_agent,
                                                        viewport={"width": 800, "height": 800},
                                                        permissions=[],
                                                        storage_state=None )
                            

                            # اعتراض طلبات الإعلانات فقط
                            context.route("**/*ads*", fake_ads)

                            page = context.new_page()

                            # تعطيل التحقق من مانع الإعلانات
                            page.add_init_script("""
                                // خداع الكود الذي يتحقق من وجود مانع الإعلانات
                                Object.defineProperty(window, 'adblockEnabled', { value: false });

                                // إدخال عناصر إعلانات وهمية
                                var fakeAd = document.createElement('div');
                                fakeAd.className = 'ad-banner';
                                fakeAd.style.display = 'block'; // جعل العنصر مرئيًا
                                document.body.appendChild(fakeAd);
                            """)

                            faker = Faker('en_US')
                            # اختيار عنوان عشوائي من نيويورك
    

                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                            # توليد باقي العنوان باستخدام Faker
                            street = faker.street_address()
                            full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                            # ✅ 1. خزّن الاسم الأول والاسم الأخير
                            first_name = faker.first_name()
                            last_name = faker.last_name()

                            # ✅ 2. ركّب الاسم الكامل
                            full_name = f"{first_name} {last_name}"
                            #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                            
                                    # انتظار اكتمال تحميل الصفحة
                            page.wait_for_load_state('networkidle')

                            # إزالة الإعلانات بعد التحميل
                            page.evaluate("""
                                document.querySelectorAll('iframe, .ad-banner, .ad-container').forEach(el => el.remove());
                            """)
                            #email = email_gmail

                    
                            #process_gmail_account1(page, email_gmail, password_gmail ,account1 )
                            success = process_gmail_account1(page, email_gmail, password_gmail, account1)
                            if not success:
                                print("❌ فشل في عملية Gmail - إعادة التشغيل من البداية...")
                                continue  # نرجع يعيد كل الكود من أول وجديد
                                    
                                
                            #email = tempmail(page)
                            #email = email_gmail


                            try:
                                success_flag = process_account(page,account1,email_gmail, password,password_gmail, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                                if not success_flag:
                                    #log_error(account)
                                    continue  # الانتقال للحساب التالي

                                #Reset()

                                # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                                #time.sleep(3)

                                # # المسار الأساسي
                                # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                                # try:
                                #     for item in os.listdir(base_path):
                                #         item_path = os.path.join(base_path, item)

                                #         if item == "Settings":
                                #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                                #             continue

                                #         if os.path.isdir(item_path):
                                #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                                #             for sub_item in os.listdir(item_path):
                                #                 sub_item_path = os.path.join(item_path, sub_item)
                                #                 if os.path.isdir(sub_item_path):
                                #                     shutil.rmtree(sub_item_path)
                                #                 else:
                                #                     os.remove(sub_item_path)
                                #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                                #         elif os.path.isfile(item_path):
                                #             os.remove(item_path)
                                #             print(f"🧹 تم حذف الملف: {item}")

                                #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                                #     time.sleep(2)

                                # except Exception as e:
                                #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                            except Exception as e:
                                print(f"فشل في معالجة الحساب {email_gmail}: {e}")
                                continue  # الانتقال للحساب التالي


                            finally:
                                # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                                context.unroute("**/*ads*")
                                # إغلاق المتصفح بعد المعالجة
                                context.close()
                                browser.close()
                              
            
                                     
                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")
                    

                #break

            except Exception as e:
                print(Fore.RED +f"General error: {e}")

        sys.exit(0)
    if __name__ == "__main__":
        main()
        




#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def Creat_Outlook():

    import subprocess
    import uiautomation as auto
    import time
    import requests
    from bs4 import BeautifulSoup
    import re
    import csv
    import json
    import random
    from playwright.sync_api import sync_playwright
    from faker import Faker
    import os
    import pycountry
    from datetime import datetime
    from datetime import datetime, timedelta
    import string
    import shutil
    import pandas as pd
    import json

    #الاختيارات للدول
    from rich.console import Console

    from rich.table import Table
    #الالوان
    #الصوتيات
    import winsound
    from pathlib import Path
    from colorama import Fore, Style, init


    # main_script.py
    import hashlib
    import base64
    from datetime import datetime, timedelta
    import platform, uuid, psutil

    import time
    import random
    from evpn import ExpressVpnApi
    import threading
    import time
    import keyboard

    # إنشاء كائن Console من rich
    console = Console()
    # تفعيل دعم الألوان في موجه الأوامر
    init(autoreset=True)


    # تعريف الألوان
    GREEN = Fore.GREEN
    BLUE = Fore.BLUE
    RED = Fore.RED
    RESET = Style.RESET_ALL




    def fake_ads(route):
        """
        استجابة وهمية لطلبات الإعلانات.
        """
        route.fulfill(
            status=200,  # استجابة ناجحة
            content_type="text/plain",  # نوع المحتوى
            body=""  # محتوى فارغ
        )








#////////////////////////////////////////////////////////////////////////////////


    # قائمة مدن حقيقية في ولاية نيويورك مع zip codes
    new_york_addresses = [
        {"city": "New York", "zip": "10035"},
        {"city": "New York", "zip": "10075"},
        {"city": "New York", "zip": "10110"},
        {"city": "New York", "zip": "10010"},
        {"city": "New York", "zip": "11385"},
        {"city": "New York", "zip": "10017"},
        {"city": "New York", "zip": "10014"},
        {"city": "New York", "zip": "10029"}
    ]

    egypt_addresses = [
        {"city": "Cairo", "zip": "11511"},
        {"city": "Giza", "zip": "12511"},
        {"city": "Alexandria", "zip": "21523"},
        {"city": "Mansoura", "zip": "35511"},
        {"city": "Tanta", "zip": "31511"},
        {"city": "Assiut", "zip": "71511"},
        {"city": "Sohag", "zip": "82511"},
        {"city": "Zagazig", "zip": "44511"},
        {"city": "Banha", "zip": "13511"},
        {"city": "Damanhour", "zip": "22511"}
    ]

    south_africa_addresses = [
        {"city": "Johannesburg", "zip": "2000"},
        {"city": "Cape Town", "zip": "8001"},
        {"city": "Durban", "zip": "4001"},
        {"city": "Pretoria", "zip": "0002"},
        {"city": "Port Elizabeth", "zip": "6000"},
        {"city": "Bloemfontein", "zip": "9301"},
        {"city": "East London", "zip": "5201"},
        {"city": "Polokwane", "zip": "0699"},
        {"city": "Kimberley", "zip": "8301"},
        {"city": "Nelspruit", "zip": "1200"}
    ]

    hong_kong_addresses = [
        {"city": "Central and Western", "zip": "0001"},
        {"city": "Wan Chai", "zip": "0002"},
        {"city": "Eastern", "zip": "0003"},
        {"city": "Southern", "zip": "0004"},
        {"city": "Yau Tsim Mong", "zip": "0005"},
        {"city": "Sham Shui Po", "zip": "0006"},
        {"city": "Kowloon City", "zip": "0007"},
        {"city": "Wong Tai Sin", "zip": "0008"},
        {"city": "Kwun Tong", "zip": "0009"},
        {"city": "Sha Tin", "zip": "0010"}
    ]


    germany_addresses = [
        {"city": "Berlin", "zip": "10115"},
        {"city": "Munich", "zip": "80331"},
        {"city": "Hamburg", "zip": "20095"},
        {"city": "Frankfurt", "zip": "60311"},
        {"city": "Cologne", "zip": "50667"},
        {"city": "Düsseldorf", "zip": "40210"},
        {"city": "Stuttgart", "zip": "70173"},
        {"city": "Dresden", "zip": "01067"},
        {"city": "Leipzig", "zip": "04103"}
    ]


    france_addresses = [
        {"city": "Paris", "zip": "75001"},
        {"city": "Marseille", "zip": "13001"},
        {"city": "Lyon", "zip": "69001"},
        {"city": "Toulouse", "zip": "31000"},
        {"city": "Nice", "zip": "06000"},
        {"city": "Lille", "zip": "59000"},
        {"city": "Bordeaux", "zip": "33000"},
        {"city": "Nantes", "zip": "44000"},
        {"city": "Strasbourg", "zip": "67000"}
    ]




    canada_addresses = [
        {"city": "Quebec City", "zip": "J0V 1B0"},
        {"city": "Quebec City", "zip": "J6S 3K5"},
        {"city": "Quebec City", "zip": "J0E 2K0"},
        {"city": "Quebec City", "zip": "H3H 1R3"},
        {"city": "Quebec City", "zip": "H1S 1A9"},
        {"city": "Quebec City", "zip": "G2E 4W8"},
        {"city": "Quebec City", "zip": "H2V 4H1"},
        {"city": "Quebec City", "zip": "G8H 2M9"},
        {"city": "Quebec City", "zip": "G6W 5M6"},
    ]

    indonesia_addresses = [
        {"city": "Jakarta", "zip": "10110"},
        {"city": "Surabaya", "zip": "60221"},
        {"city": "Bandung", "zip": "40115"},
        {"city": "Medan", "zip": "20151"},
        {"city": "Yogyakarta", "zip": "55281"},
        {"city": "Semarang", "zip": "50134"},
        {"city": "Makassar", "zip": "90115"},
        {"city": "Palembang", "zip": "30111"},
        {"city": "Denpasar", "zip": "80111"}
    ]
    netherlands_addresses = [
        {"city": "Amsterdam", "zip": "1011 AB"},
        {"city": "Rotterdam", "zip": "3011 AB"},
        {"city": "The Hague", "zip": "2511 CG"},
        {"city": "Utrecht", "zip": "3511 AE"},
        {"city": "Eindhoven", "zip": "5611 AB"},
        {"city": "Groningen", "zip": "9711 AG"},
        {"city": "Maastricht", "zip": "6211 KB"},
        {"city": "Arnhem", "zip": "6811 CW"},
        {"city": "Leiden", "zip": "2311 BJ"}
    ]
    mexico_addresses = [
        {"city": "Mexico City", "zip": "01000"},
        {"city": "Guadalajara", "zip": "44100"},
        {"city": "Monterrey", "zip": "64000"},
        {"city": "Cancún", "zip": "77500"},
        {"city": "Mérida", "zip": "97000"},
        {"city": "Puebla", "zip": "72000"},
        {"city": "Tijuana", "zip": "22000"},
        {"city": "Oaxaca", "zip": "68000"},
        {"city": "León", "zip": "37000"}
    ]
    kazakhstan_addresses = [
        {"city": "Almaty", "zip": "050000"},
        {"city": "Nur-Sultan", "zip": "010000"},
        {"city": "Shymkent", "zip": "160000"},
        {"city": "Karaganda", "zip": "100000"},
        {"city": "Aktobe", "zip": "030000"},
        {"city": "Taraz", "zip": "080000"},
        {"city": "Pavlodar", "zip": "140000"},
        {"city": "Semey", "zip": "071400"},
        {"city": "Kostanay", "zip": "110000"}
    ]
    japan_addresses = [
        {"city": "Tokyo", "zip": "100-0001"},
        {"city": "Osaka", "zip": "530-0001"},
        {"city": "Kyoto", "zip": "600-0001"},
        {"city": "Sapporo", "zip": "060-0001"},
        {"city": "Fukuoka", "zip": "810-0001"},
        {"city": "Hiroshima", "zip": "730-0001"},
        {"city": "Nagoya", "zip": "460-0001"},
        {"city": "Sendai", "zip": "980-0001"},
        {"city": "Kobe", "zip": "650-0001"}
    ]
    nigeria_addresses = [
        {"city": "Lagos", "zip": "100001"},
        {"city": "Abuja", "zip": "900001"},
        {"city": "Port Harcourt", "zip": "500001"},
        {"city": "Kano", "zip": "700001"},
        {"city": "Ibadan", "zip": "200001"},
        {"city": "Benin City", "zip": "300001"},
        {"city": "Kaduna", "zip": "800001"},
        {"city": "Enugu", "zip": "400001"},
        {"city": "Jos", "zip": "930001"}
    ]
    slovenia_addresses = [
        {"city": "Ljubljana", "zip": "1000"},
        {"city": "Maribor", "zip": "2000"},
        {"city": "Celje", "zip": "3000"},
        {"city": "Kranj", "zip": "4000"},
        {"city": "Novo Mesto", "zip": "8000"},
        {"city": "Ptuj", "zip": "2250"},
        {"city": "Koper", "zip": "6000"},
        {"city": "Murska Sobota", "zip": "9000"},
        {"city": "Velenje", "zip": "3320"}
    ]
    slovakia_addresses = [
        {"city": "Bratislava", "zip": "81101"},
        {"city": "Košice", "zip": "04001"},
        {"city": "Prešov", "zip": "08001"},
        {"city": "Nitra", "zip": "94901"},
        {"city": "Trnava", "zip": "91701"},
        {"city": "Žilina", "zip": "01001"},
        {"city": "Trenčín", "zip": "91101"},
        {"city": "Martin", "zip": "03601"},
        {"city": "Poprad", "zip": "05801"}
    ]
    spain_addresses = [
        {"city": "Madrid", "zip": "28001"},
        {"city": "Barcelona", "zip": "08001"},
        {"city": "Valencia", "zip": "46001"},
        {"city": "Seville", "zip": "41001"},
        {"city": "Malaga", "zip": "29001"},
        {"city": "Zaragoza", "zip": "50001"},
        {"city": "Bilbao", "zip": "48001"},
        {"city": "Palma", "zip": "07001"},
        {"city": "Murcia", "zip": "30001"}
    ]
    thailand_addresses = [
        {"city": "Bangkok", "zip": "10100"},
        {"city": "Chiang Mai", "zip": "50000"},
        {"city": "Phuket", "zip": "83000"},
        {"city": "Pattaya", "zip": "20150"},
        {"city": "Khon Kaen", "zip": "40000"},
        {"city": "Nakhon Ratchasima", "zip": "30000"},
        {"city": "Ayutthaya", "zip": "13000"},
        {"city": "Udon Thani", "zip": "41000"},
        {"city": "Hua Hin", "zip": "77110"}
    ]
    uk_addresses = [
        {"city": "London", "zip": "HA1 2TR"},
        {"city": "London", "zip": "SW4 0LB"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "NW1 0NE"},
        {"city": "London", "zip": "E13 9AP"},
        {"city": "London", "zip": "SW3 1PP"},
        {"city": "London", "zip": "SW7 5JB"},
        {"city": "London", "zip": "N19 5PX"},
        {"city": "London", "zip": "HA1 2TR"},
    ]
    bolivia_addresses = [
        {"city": "La Paz", "zip": "1000"},
        {"city": "Santa Cruz", "zip": "3000"},
        {"city": "Cochabamba", "zip": "4000"},
        {"city": "Sucre", "zip": "5000"},
        {"city": "Potosí", "zip": "6000"},
        {"city": "Tarija", "zip": "7000"},
        {"city": "Oruro", "zip": "8000"},
        {"city": "Cobija", "zip": "9000"},
        {"city": "Trinidad", "zip": "10000"},
    ]
    italy_addresses = [
        {"city": "Rome", "zip": "00100"},
        {"city": "Milan", "zip": "20100"},
        {"city": "Naples", "zip": "80100"},
        {"city": "Turin", "zip": "10100"},
        {"city": "Palermo", "zip": "90100"},
        {"city": "Genoa", "zip": "16100"},
        {"city": "Bologna", "zip": "40100"},
        {"city": "Florence", "zip": "50100"},
        {"city": "Venice", "zip": "30100"}
    ]




    #time.sleep(3)
    #////////////////////////////////////////////////////////////////////////

    # def connect_vpn(api):

    #     import time
    #     import random
    #     from evpn import ExpressVpnApi

    #     # الدول والسيرفرات المناسبة لمصر والشرق الأوسط
    #     preferred_locations_names = [
    #         "Turkey",
    #         "France - Marseille",
    #         "Germany - Frankfurt - 1",
    #         "Germany - Frankfurt - 3",
    #         "UK - London",
    #         "South Africa",
    #         "Germany",
    #         "Hong Kong - 1",
    #         "Japan - Tokyo",
    #         "Spain - Madrid",
    #         "Egypt",
    #         "Algeria",
    #         "Morocco",
    #         "Ghana"

    #     ]

    #     with ExpressVpnApi() as api:
    #         # فلترة السيرفرات حسب الأسماء المختارة
    #         preferred_locations = [
    #             loc for loc in api.locations
    #             if any(name in loc["name"] for name in preferred_locations_names)
    #         ]

    #         if preferred_locations:
    #             loc = random.choice(preferred_locations)
    #             print(Fore.YELLOW + "Connecting to: " + Fore.BLUE + f"{loc['name']}")
    #             api.connect(loc["id"])
    #         else:
    #             print("لا توجد مواقع ضمن السيرفرات المفضلة.")

    #     time.sleep(2)


    #         # التحقق من حالة الاتصال
    #     status = api.status()
    #     if status and "Connected" in status:
    #         print(f"✅ تم الاتصال بنجاح: {status}")
    #         return True
    #     else:
    #         print(f"❌ فشل الاتصال، الحالة الحالية: {status}")
    #         return False




    import time
    import random
    import requests
    from evpn import ExpressVpnApi
    from colorama import Fore, init

    init(autoreset=True)

    def get_current_ip():
        try:
            return requests.get("https://api.ipify.org").text.strip()
        except:
            return None

    def connect_vpn(api):
        preferred_locations_names = [
            "Turkey", "France - Marseille", "Germany - Frankfurt - 1", "Germany - Frankfurt - 3",
            "UK - London", "South Africa", "Germany", "Hong Kong - 1", "Japan - Tokyo",
            "Spain - Madrid", "Egypt", "Algeria", "Morocco", "Ghana"
        ]

        preferred_locations = [
            loc for loc in api.locations
            if any(name in loc["name"] for name in preferred_locations_names)
        ]

        if not preferred_locations:
            print(Fore.RED + "❌ No sites found in the favorite servers.")

            return

        connected = False
        original_ip = get_current_ip()
        if not original_ip:
            print(Fore.RED + "⚠️ I couldn't retrieve the current IP.")

            return

        print(Fore.CYAN + f"🌐 The current IP before connection: {original_ip}")


        while not connected:
            random.shuffle(preferred_locations)

            for loc in preferred_locations:
                print(Fore.YELLOW + f"🟡 Attempting to connect to: {loc['name']}")

                try:
                    api.connect(loc["id"])
                    time.sleep(5)

                    new_ip = get_current_ip()
                    if new_ip and new_ip != original_ip:
                        print(Fore.GREEN + f"✅ Connection successful. New IP: {new_ip}")

                        connected = True
                        break
                    else:
                        print(Fore.RED + f"❌ Connection failed, the IP did not change ({new_ip})")

                except Exception as e:
                    print(Fore.RED + f"⚠️ Error during connection: {e}")


            if not connected:
                #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

                time.sleep(5)


    def disconnect_vpn(api):
        #print(Fore.MAGENTA + "🔁 Retrying in 10 seconds...")

        api.disconnect()
        #print("Connection disconnected.")








    def Reset():
        while True:
            try:    
                #print("🔍 نحاول نجيب نافذة Apple TV...")
                #نحاول نجيب نافذة Apple TV
                apple_tv_window = auto.WindowControl(searchDepth=1, Name="Settings")

                if apple_tv_window.Exists(20):
                    #print("✅ Apple TV مفتوح")
                    apple_tv_window.SetActive()
                    
                else:
                    print(Fore.RED + "❌ Apple TV is not open.")
            except:
                print(Fore.RED + "❌ Apple TV is not open.")
            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print(Fore.RED + "❌ Button does not support Invoke.")
                else:
                    print(Fore.RED + "❌ Button not found.")
            except:
                print(Fore.RED + "❌ Apple TV is not open")


            try:
                # البحث عن زر Continue مباشرةً من أي مكان
                continue_btn = auto.ButtonControl(Name='Reset')
                if continue_btn.Exists(10, 1):
                    #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                    invoke = continue_btn.GetInvokePattern()
                    if invoke:
                        invoke.Invoke()
                        #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                    else:
                        print(Fore.RED + "❌ Button does not support Invoke.")
                else:
                    print(Fore.RED + "❌ Button not found.")
            except:
                print(Fore.RED + "❌ Apple TV is not open")


            # محاولة العثور على الرسالة
            message3 = auto.TextControl(Name="App reset completed.")
            # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            if message3.Exists(13, 1):
                #print("✅ Found رسالة السابورت.")
                #print(message3)
                break


        # while True:

        #         try:
        #             # البحث عن زر Continue مباشرةً من أي مكان
        #             continue_btn = auto.ButtonControl(Name='Repair')
        #             if continue_btn.Exists(10, 1):
        #                 #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
        #                 invoke = continue_btn.GetInvokePattern()
        #                 if invoke:
        #                     invoke.Invoke()
        #                     #print("✅ تم الضغط على الزر بنجاح بدون Click.")
        #                 else:
        #                     print(Fore.RED + "❌ Button does not support Invoke.")
        #             else:
        #                 print(Fore.RED + "❌ Button not found.")
        #         except:
        #             print(Fore.RED + "❌ Apple TV is not open")



        #         # محاولة العثور على الرسالة
        #         message3 = auto.TextControl(Name="App repair completed.")
        #         # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
        #         if message3.Exists(13, 1):
        #             #print("✅ Found رسالة السابورت.")
        #             #print(message3)
        #             break





    def get_random_user_agent(file_path):
        try:
            with open(file_path, "r", encoding="utf-8") as file:
                user_agents = file.readlines()
            user_agents = [ua.strip() for ua in user_agents if ua.strip()]
            return random.choice(user_agents) if user_agents else None
        except Exception as e:
            console.print(f"[red]Error reading User-Agent file: {e}")
            return None

    def get_otp(otp_link):
        if not otp_link.startswith("http"):
            otp_link = "https://" + otp_link

        user_agents_file = "input/user_agents.txt"
        random_user_agent = get_random_user_agent(user_agents_file)

        if not random_user_agent:
            console.print("[red]There are no valid User-Agents.")
            return

        headers = {
            "User-Agent": random_user_agent
        }

        time.sleep(5)  # الانتظار قبل المحاولة الأولى
        retries = 5
        while retries > 0:
            try:
                response = requests.get(otp_link, headers=headers, timeout=10)
                if response.status_code == 200:
                    soup = BeautifulSoup(response.text, 'html.parser')
                    otp_code = re.search(r'\d{6}', soup.get_text())
                    if otp_code:
                        print(f"{otp_code.group(0)}")
                        return otp_code.group(0)
                    else:
                        print(Fore.RED +"Not Found OTP")
                else:
                    print(f"HTTP Error: {response.status_code}, retries left: {retries - 1}")
            except requests.exceptions.RequestException as e:
                print(f"Request failed: {e}, retries left: {retries - 1}")

            retries -= 1
            time.sleep(5)

        raise Exception(Fore.RED + "OTP not found after multiple attempts.")


    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
































        #!/usr/bin/env python3
        # -*- coding: utf-8 -*-

    import os
    import sys
    import ctypes
    import subprocess
    import uuid
    import winreg
    import random
    import string
    import time

    # === Constants ===
    REG_NET_CLASS = r'SYSTEM\\CurrentControlSet\\Control\\Class\\{4d36e972-e325-11ce-bfc1-08002be10318}'
    REG_CRYPTOGRAPHY = r"SOFTWARE\\Microsoft\\Cryptography"
    REG_HWPROFILE = r"SYSTEM\\CurrentControlSet\\Control\\IDConfigDB\\Hardware Profiles\\0001"
    REG_WINDOWS_NT = r"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"
    LOG_FILE = "spoof_log.txt"

    # Windows specific flag for subprocess to hide console window (if needed, though less relevant now)
    CREATE_NO_WINDOW = 0x08000000

    # === Helper Functions ===

    def is_admin():
        """Checks if the script is running with administrative privileges."""
        try:
            if os.name == 'nt':
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            else:
                # On non-Windows, assume admin check is not applicable or needed for these functions
                return True # Or False depending on desired behavior
        except AttributeError:
            print("Warning: Could not determine admin status via ctypes.")
            return False # Safer default
        except Exception as e:
            print(f"Error checking admin status: {e}")
            return False

    def run_as_admin():
        """Restarts the script with administrative privileges on Windows."""
        if os.name != 'nt':
            print("Admin elevation is only supported on Windows.")
            return False # Indicate failure to elevate

        try:
            # Ensure __file__ is reliable or use sys.argv[0]
            try:
                script = os.path.abspath(__file__)
            except NameError:
                script = os.path.abspath(sys.argv[0])

            params = ' '.join(sys.argv[1:])
            result = ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, f'"{script}" {params}', None, 1)
            if result <= 32:
                print(f"Failed to elevate privileges, ShellExecuteW error code: {result}. Please run manually as Administrator.")
                # Optional: show a console pause
                # input("Press Enter to exit.")
                return False
            else:
                print("Elevation successful, relaunching...")
                sys.exit(0) # Exit the current non-admin process
        except FileNotFoundError as e:
            print(f"Failed to elevate privileges: Cannot find file - {e}. Is Python in your PATH?")
            return False
        except Exception as e:
            print(f"Failed to elevate privileges: {e}")
            return False

    def log_action(message):
        """Logs a message to the log file and prints to console."""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        #print(f"[LOG] {log_entry}") # Print to console as well  -------------------------------------------------------
        try:
            with open(LOG_FILE, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"[ERROR] Logging to file failed: {e}")

    def generate_random_mac():
        """Generates a random MAC address string (XX-XX-XX-XX-XX-XX)."""
        first_octet = (random.randint(0x00, 0xff) | 0x02) & 0xFE
        return "{:02X}-{:02X}-{:02X}-{:02X}-{:02X}-{:02X}".format(
            first_octet, *[random.randint(0x00, 0xff) for _ in range(5)]
        )

    def generate_random_product_id():
        """Generates a random Windows Product ID like string."""
        group1 = ''.join(random.choices(string.digits, k=5))
        group2 = ''.join(random.choices(string.digits, k=3))
        group3 = ''.join(random.choices(string.digits, k=7))
        group4 = ''.join(random.choices(string.digits, k=5))
        return f"{group1}-{group2}-{group3}-{group4}"

    # === Spoofing Functions ===
    # (Keep all spoofing functions: spoof_mac_address, spoof_pc_name,
    # spoof_machine_guid, spoof_hwprofile_guid, spoof_product_id,
    # spoof_install_time, wipe_crypto_keys, reset_network_adapters
    # exactly as they were in the previous version, they don't depend on the GUI)
    # ... (Include all the unchanged spoofing functions here) ...
    def spoof_mac_address():
        """Attempts to spoof the 'NetworkAddress' for network adapters."""
        if os.name != 'nt': return False, "MAC spoofing via registry only on Windows."
        spoofed_count = 0
        errors = []
        target_adapters = 0 # Count how many adapters we try to modify

        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_NET_CLASS) as class_key:
                i = 0
                while True:
                    try:
                        subkey_name = winreg.EnumKey(class_key, i)
                        # Only process subkeys that are purely numeric (standard adapter indices)
                        if subkey_name.isdigit():
                            adapter_key_path = f"{REG_NET_CLASS}\\{subkey_name}"
                            adapter_desc = "Unknown Adapter"
                            try:
                                # Try reading DriverDesc to ensure it's a likely network adapter
                                # and open key with write access upfront if possible
                                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, adapter_key_path, 0, winreg.KEY_READ | winreg.KEY_SET_VALUE) as adapter_key:
                                    try:
                                        adapter_desc = winreg.QueryValueEx(adapter_key, "DriverDesc")[0]
                                    except FileNotFoundError:
                                        pass # Still proceed cautiously
                                    except Exception as desc_e:
                                        log_action(f"Warning: Could not read DriverDesc for {adapter_key_path}: {desc_e}")

                                    # Generate a *new* MAC for each adapter
                                    new_mac_value = generate_random_mac().replace('-', '')
                                    target_adapters += 1
                                    winreg.SetValueEx(adapter_key, "NetworkAddress", 0, winreg.REG_SZ, new_mac_value)
                                    spoofed_count += 1
                                    log_action(f"Set NetworkAddress for {adapter_key_path} ({adapter_desc}) to {new_mac_value}")

                            except FileNotFoundError:
                                log_action(f"Skipping non-existent or inaccessible key: {adapter_key_path}")
                            except PermissionError:
                                errors.append(f"Permission denied for {adapter_key_path}")
                                log_action(f"Permission denied setting NetworkAddress for {adapter_key_path}")
                            except Exception as e:
                                error_msg = f"Failed setting NetworkAddress for {adapter_key_path}: {e}"
                                errors.append(error_msg)
                                log_action(error_msg)
                        i += 1
                    except OSError as e:
                        if e.winerror == 259: # No more data is available
                            break
                        else:
                            log_action(f"Error enumerating network adapters: {e}")
                            errors.append(f"Registry iteration error: {e}")
                            break

        except FileNotFoundError:
            return False, f"Registry path not found: {REG_NET_CLASS}"
        except PermissionError:
            return False, f"Permission denied reading network adapter list in registry."
        except Exception as e:
            return False, f"MAC spoofing failed during key iteration: {e}"

        if spoofed_count > 0:
            msg = f"MAC address spoofed for {spoofed_count} of {target_adapters} targeted adapter(s)."
            if errors: msg += f" Encountered {len(errors)} errors (check logs)."
            msg += " Network reset recommended."
            return True, msg
        elif errors:
            return False, f"MAC spoof failed. Targeted {target_adapters} adapter(s) but encountered {len(errors)} errors: {'; '.join(errors)}"
        elif target_adapters > 0:
            return False, f"Targeted {target_adapters} adapter(s), but failed to set NetworkAddress for any (check logs)."
        else:
            return False, "No suitable network adapters found or targeted for MAC spoofing."

    def spoof_pc_name():
        """Changes the computer name using PowerShell's Rename-Computer."""
        if os.name != 'nt':
            return False, "PC Name spoofing is only available on Windows."
        try:
            new_name = "PC-" + ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))
            command = [
                "powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command",
                f"Rename-Computer -NewName '{new_name}' -Force -PassThru -ErrorAction Stop"
            ]
            result = subprocess.run(
                command, capture_output=True, text=True, check=False, encoding='utf-8', errors='ignore',
                creationflags=CREATE_NO_WINDOW
            )
            if result.returncode == 0:
                log_action(f"PC Name change initiated via PowerShell to {new_name}. Reboot required.")
                return True, f"PC Name change initiated to {new_name}. Reboot required."
            else:
                stderr_output = result.stderr.strip() if result.stderr else "N/A"
                stdout_output = result.stdout.strip() if result.stdout else "N/A"
                error_details = f"RC: {result.returncode}. Stderr: '{stderr_output}'. Stdout: '{stdout_output}'."
                log_action(f"PC name spoof failed using PowerShell. {error_details} Command: {' '.join(command)}")
                user_message = f"PC name spoof failed (PowerShell RC: {result.returncode})."
                stderr_lower = stderr_output.lower()
                if "access is denied" in stderr_lower or "privilege not held" in stderr_lower:
                    user_message += " Ensure running as Administrator."
                elif "cannot validate argument" in stderr_lower or "parameter is incorrect" in stderr_lower:
                    user_message += " Invalid name generated or PS command issue."
                elif "the change could not be applied" in stderr_lower:
                    user_message += " The change may require a specific state or permission."
                else:
                    first_line_stderr = stderr_output.split('\n')[0]
                    user_message += f" Error: {first_line_stderr[:100]}" if first_line_stderr else " Check logs for details."
                return False, user_message
        except FileNotFoundError:
            log_action("PC name spoof failed: powershell.exe not found in PATH.")
            return False, "PC name spoof failed: PowerShell not found."
        except Exception as e:
            log_action(f"PC name spoof failed: An unexpected error occurred: {e}")
            return False, f"PC name spoof failed: An unexpected error: {e}"

    def spoof_machine_guid():
        """Spoofs the MachineGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = str(uuid.uuid4())
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_CRYPTOGRAPHY, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "MachineGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"Machine GUID spoofed to {new_guid}")
            return True, "Machine GUID spoofed."
        except FileNotFoundError:
            log_action(f"Machine GUID spoof failed: Registry path not found: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"Machine GUID spoof failed: Permission denied for path: {REG_CRYPTOGRAPHY}")
            return False, f"Machine GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Machine GUID spoof failed: {e}")
            return False, f"Machine GUID spoof failed: {e}"

    def spoof_hwprofile_guid():
        """Spoofs the HwProfileGuid in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_guid = "{" + str(uuid.uuid4()) + "}"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_HWPROFILE, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "HwProfileGuid", 0, winreg.REG_SZ, new_guid)
            log_action(f"HwProfile GUID spoofed to {new_guid}")
            return True, "HwProfile GUID spoofed."
        except FileNotFoundError:
            log_action(f"HwProfile GUID spoof failed: Registry path not found: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Path not found."
        except PermissionError:
            log_action(f"HwProfile GUID spoof failed: Permission denied for path: {REG_HWPROFILE}")
            return False, f"HwProfile GUID spoof failed: Permission denied."
        except Exception as e:
            log_action(f"HwProfile GUID spoof failed: {e}")
            return False, f"HwProfile GUID spoof failed: {e}"

    def spoof_product_id():
        """Spoofs the Windows ProductId in the registry."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            new_product_id = generate_random_product_id()
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "ProductId", 0, winreg.REG_SZ, new_product_id)
            log_action(f"Windows ProductId spoofed to {new_product_id}")
            return True, "Windows ProductId spoofed."
        except FileNotFoundError:
            log_action(f"ProductId spoof failed: Registry path not found: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Path not found."
        except PermissionError:
            log_action(f"ProductId spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"ProductId spoof failed: Permission denied."
        except Exception as e:
            log_action(f"ProductId spoof failed: {e}")
            return False, f"ProductId spoof failed: {e}"

    def spoof_install_time():
        """Spoofs the Windows InstallDate (DWORD) in the registry with a random past timestamp."""
        if os.name != 'nt': return False, "Registry modification only on Windows."
        try:
            now = int(time.time())
            seconds_in_year = 365 * 24 * 60 * 60
            min_reasonable_timestamp = 946684800 # Approx Jan 1, 2000
            lower_bound = max(now - 5 * seconds_in_year, min_reasonable_timestamp)
            upper_bound = now - (30 * 24 * 60 * 60) # 30 days ago
            if lower_bound >= upper_bound:
                random_past_time = lower_bound
            else:
                random_past_time = random.randint(lower_bound, upper_bound)

            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, "InstallDate", 0, winreg.REG_DWORD, random_past_time)

            readable_date = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(random_past_time))
            log_action(f"Windows InstallDate spoofed to DWORD {random_past_time} ({readable_date})")
            return True, "Windows Install Time (InstallDate) spoofed."
        except FileNotFoundError:
            try: # Check if only value is missing
                with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, REG_WINDOWS_NT, 0, winreg.KEY_READ) as key:
                    winreg.QueryValueEx(key, "InstallDate")
                log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except FileNotFoundError:
                log_action(f"Install Time spoof failed: Path or 'InstallDate' value not found: {REG_WINDOWS_NT}\\InstallDate")
                return False, f"Install Time spoof failed: Path/value not found."
            except PermissionError:
                log_action(f"Install Time spoof failed: Permission denied reading/writing path: {REG_WINDOWS_NT}")
                return False, f"Install Time spoof failed: Permission denied."
            except Exception as e_inner:
                log_action(f"Install Time spoof failed checking key: {e_inner}")
                return False, f"Install Time spoof failed: {e_inner}"
        except PermissionError:
            log_action(f"Install Time spoof failed: Permission denied for path: {REG_WINDOWS_NT}")
            return False, f"Install Time spoof failed: Permission denied."
        except Exception as e:
            log_action(f"Install Time spoof failed: {e}")
            return False, f"Install Time spoof failed: {e}"

    def wipe_crypto_keys():
        """Deletes machine keys from common Crypto RSA locations."""
        if os.name != 'nt': return False, "File deletion assumes Windows paths."
        program_data = os.environ.get('ProgramData', 'C:\\ProgramData')
        system_root = os.environ.get('SystemRoot', 'C:\\Windows')
        paths = [
            os.path.join(program_data, r'Microsoft\\Crypto\\RSA\\MachineKeys'),
            os.path.join(system_root, r'System32\\config\\systemprofile\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\LocalService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
            os.path.join(system_root, r'ServiceProfiles\\NetworkService\\AppData\\Roaming\\Microsoft\\Crypto\\RSA'),
        ]
        deleted_count = 0
        errors = []
        accessed_paths = 0
        skipped_paths = 0

        for path in paths:
            if os.path.exists(path) and os.path.isdir(path):
                accessed_paths += 1
                log_action(f"Checking keys in: {path}")
                try:
                    items = os.listdir(path)
                    if not items: log_action(f"Directory is empty: {path}"); continue
                    for filename in items:
                        file_path = os.path.join(path, filename)
                        try:
                            if os.path.isfile(file_path):
                                os.remove(file_path)
                                deleted_count += 1
                        except PermissionError as e_file:
                            error_msg = f"Permission denied deleting {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except OSError as e_file:
                            error_msg = f"Could not delete {file_path}: {e_file.strerror}"
                            errors.append(error_msg); log_action(error_msg)
                        except Exception as e_file:
                            error_msg = f"Unexpected error deleting {file_path}: {e_file}"
                            errors.append(error_msg); log_action(error_msg)
                except PermissionError as e_dir:
                    error_msg = f"Permission denied listing directory {path}: {e_dir.strerror}"
                    errors.append(error_msg); log_action(error_msg)
                except FileNotFoundError:
                    error_msg = f"Directory disappeared during processing: {path}"
                    errors.append(error_msg); log_action(error_msg)
                except Exception as e_dir:
                    error_msg = f"Error accessing directory {path}: {e_dir}"
                    errors.append(error_msg); log_action(error_msg)
            else:
                skipped_paths += 1
                log_action(f"Path not found or not a directory, skipping: {path}")

        if accessed_paths == 0:
            msg = f"No accessible Crypto Key directories found ({skipped_paths} paths skipped)."
            log_action(msg)
            return False, msg if skipped_paths == len(paths) else "Checked locations, but no accessible key directories found."

        if deleted_count > 0 :
            msg = f"Wiped {deleted_count} crypto key files from {accessed_paths} location(s)."
            if errors: msg += f" Encountered {len(errors)} errors."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg
        elif errors:
            msg = f"Crypto key wipe encountered {len(errors)} errors in {accessed_paths} location(s). No files deleted."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return False, msg
        else:
            msg = f"No crypto key files found to delete in {accessed_paths} accessible location(s)."
            if skipped_paths > 0: msg += f" Skipped {skipped_paths} paths."
            log_action(msg)
            return True, msg # Not a failure

    def reset_network_adapters():
        """Disables and re-enables network adapters using WMIC."""
        if os.name != 'nt': return False, "Network reset uses WMIC (Windows only)."
        success = True
        message = ""
        adapter_affected_disable = False
        adapter_affected_enable = False
        disable_rc, enable_rc = -1, -1

        try:
            log_action("Attempting to disable network adapters via WMIC...")
            cmd_disable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'disable']
            proc_disable = subprocess.run(cmd_disable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            disable_rc = proc_disable.returncode
            disable_stdout = proc_disable.stdout.strip()
            log_action(f"Disable adapters: RC={disable_rc}, Output='{disable_stdout[:200]}...', Stderr='{proc_disable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in disable_stdout or disable_rc == 0: adapter_affected_disable = True
            elif disable_stdout and "No Instance(s) Available." not in disable_stdout: adapter_affected_disable = True

            wait_time = 5
            log_action(f"Waiting {wait_time} seconds...")
            time.sleep(wait_time)

            log_action("Attempting to enable network adapters via WMIC...")
            cmd_enable = ['wmic', 'path', 'win32_networkadapter', 'where', 'NetConnectionID is not null', 'call', 'enable']
            proc_enable = subprocess.run(cmd_enable, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=CREATE_NO_WINDOW, timeout=60)
            enable_rc = proc_enable.returncode
            enable_stdout = proc_enable.stdout.strip()
            log_action(f"Enable adapters: RC={enable_rc}, Output='{enable_stdout[:200]}...', Stderr='{proc_enable.stderr.strip()[:200]}...'")
            if "ReturnValue = 0;" in enable_stdout or enable_rc == 0: adapter_affected_enable = True
            elif enable_stdout and "No Instance(s) Available." not in enable_stdout: adapter_affected_enable = True

            if adapter_affected_disable and adapter_affected_enable and disable_rc == 0 and enable_rc == 0:
                message = "Network adapters reset successfully."
                success = True
            elif adapter_affected_disable or adapter_affected_enable:
                message = f"Network adapter reset potentially incomplete (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False
            else:
                message = f"Network adapter reset failed or no adapters affected (Disable RC: {disable_rc}, Enable RC: {enable_rc})."
                success = False

        except subprocess.TimeoutExpired: success = False; message = "Network adapter reset timed out."
        except FileNotFoundError: success = False; message = "Network reset failed: WMIC not found."
        except Exception as e: success = False; message = f"Network reset failed: {e}"

        log_action(f"Network reset result: Success={success}, Message='{message}'")
        return success, message


    # === Standalone Action Functions ===

    def run_single_action(action_func, name="Action"):
        """Runs a single action function and prints results."""
        log_action(f"--- Running: {name} ---")
        try:
            success, msg = action_func()
            status = "[SUCCESS]" if success else "[FAILURE]"
            log_action(f"{status} {name}: {msg}")
            if not success and ("failed" in msg.lower() or "error" in msg.lower() or "permission" in msg.lower()):
                print(f"WARNING: {name} reported an issue. Check logs above and in {LOG_FILE}")
        except Exception as e:
            error_msg = f"[CRITICAL ERROR] running {name}: {e}"
            log_action(error_msg)
            print(error_msg)
        print("-" * 30) # Separator


    def run_spoof_all_console():
        """Runs all spoofing functions sequentially in console mode."""
        all_funcs_map = {
            "MAC Address": spoof_mac_address,
            "PC Name": spoof_pc_name,
            "Machine GUID": spoof_machine_guid,
            "HWProfile GUID": spoof_hwprofile_guid,
            "Product ID": spoof_product_id,
            "Install Time": spoof_install_time,
            "Wipe Crypto Keys": wipe_crypto_keys,
            #"Reset Network": reset_network_adapters
        }

        #print("")

        any_failures = False
        any_success = False
        mac_changed = False
        pc_name_changed = False

        log_action("========== Starting SPOOF ALL Sequence ==========")

        for name, func in all_funcs_map.items():
            log_action(f"--- Running: {name} ---")
            try:
                success, msg = func()
                log_action(f"Result for {name}: {'Success' if success else 'Failure'} - {msg}")
                if success:
                    any_success = True
                    if func == spoof_mac_address:
                        mac_changed = True
                    if func == spoof_pc_name:
                        pc_name_changed = True
                else:
                    any_failures = True
            except Exception as e:
                error_msg = f"[CRITICAL ERROR] during {name}: {e}"
                log_action(error_msg)
                any_failures = True

        log_action("========== SPOOF ALL Sequence Complete ==========")

        #print("")

        if any_failures:
            print(Fore.RED +"Spoof Failed ❌")
        else:
            print(Fore.GREEN +"Spoof Done ✅")

        if mac_changed:
            ##print("Note: MAC Address was changed. You may need to reset your network adapter or reboot.")
            print("")
        if pc_name_changed:
            ##print("Note: PC Name was changed. A reboot is required for changes to take effect.")
            print("")

        #print("")







#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------------------------




    def united_states(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="State")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("New York")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "New York" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def EgyptAddress(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(Name="Governorate")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Cairo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Cairo" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def South_AfricaAddress(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                  
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def hong_kong_adresses(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def germany_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
    
    def france_address(street,address_data):

        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
   
    def canada_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Quebec")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postal code", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()
        
    def indonesia_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Jakarta")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def netherlands_address(street,address_data):




        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def mexico_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Mexico")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def kazakhstan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Almaty")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def japan_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Tokyo")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="ZIP", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def nigeria_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Lagos")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovenia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def slovakia_address(street,address_data):


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()


                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def spain_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Barcelona")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def thailand_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bangkok")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def uk_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")
                    London_field = auto.Control(Name="County", AutomationId="addressOfficialCounty")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))
                    London_thread = threading.Thread(target=set_value_in_field, args=(London_field, "London"))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()
                    London_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()
                    London_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def bolivia_address(street,address_data):

   
        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")

    
                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
            

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()

    def italy_address(street,address_data):

        # دالة لتحديد الولاية مع محاولات تكرار
        def set_State():
            state_attempts = 3  # عدد المحاولات
            state_try = 0
            while state_try < state_attempts:
                try:
                    State_combo = auto.Control(AutomationId="addressOfficialStateProvince")
                    if State_combo.Exists(25, 1):
                        State_combo.SetFocus()
                        keyboard.write("Bologna")
                        time.sleep(0.1)
                        keyboard.press_and_release("enter")
                        keyboard.press_and_release("esc")

                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                        if legacy_pattern:
                            current_value = legacy_pattern.Value
                            if "Quebec" in current_value:
                                #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                return True
                            else:
                                #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                return False
                        else:
                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                            return False
                    else:
                        print(f"{state_try+1}).")
                except Exception as e:
                    print(f"{state_try+1}): {e}")


                state_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل المحاولة مرة ثانية
            Reset()    
            return False


        # دالة لكتابة القيم في الحقول مع محاولات تكرار
        def set_value_in_field(field, value):
            field_attempts = 3  # عدد المحاولات
            field_try = 0
            while field_try < field_attempts:
                try:
                    if field.Exists(25, 1):
                        field.SetFocus()
                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                        if value_pattern:
                            value_pattern.SetValue(value)
                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                            return True
                        else:
                            print("")
                            return False
                    else:
                        print(f"{field_try+1}).")
                except Exception as e:
                    print(f"❌ {field_try+1}): {e}")

                field_try += 1
                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
            Reset()    
            return False


        # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
        def perform_actions():
            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0
            while attempt < max_attempts:
                try:
                    # استدعاء دالة الكتابة في الحقول بشكل متوازي
                    Street_field = auto.Control(Name="Street", AutomationId="addressOfficialLineFirst")
                    City_field = auto.Control(Name="City", AutomationId="addressOfficialCity")
                    ZIP_field = auto.Control(Name="Postcode", AutomationId="addressOfficialPostalCode")

                    # إنشاء الخيوط
                    Street_thread = threading.Thread(target=set_value_in_field, args=(Street_field, street))
                    City_thread = threading.Thread(target=set_value_in_field, args=(City_field, address_data['city']))
                    ZIP_thread = threading.Thread(target=set_value_in_field, args=(ZIP_field, address_data['zip']))

                    # بدء الخيوط لكتابة القيم في الحقول
                    Street_thread.start()
                    City_thread.start()
                    ZIP_thread.start()

                    # الانتظار حتى تكتمل جميع الخيوط
                    Street_thread.join()
                    City_thread.join()
                    ZIP_thread.join()

                    # تشغيل خيوط اليوم والشهر معًا
                    thread_State = threading.Thread(target=set_State)
                    # بدء الخيوط لكتابة القيم في الحقول
                    thread_State.start()
                    # انتظار انتهاء التنفيذ
                    thread_State.join()

                    break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                except Exception as e:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying... {e}")

            if attempt == max_attempts:
                print("❌ The operation failed after several attempts.")
                Reset()
                return False

        # تنفيذ العملية
        perform_actions()






















    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    #-------------------------------------------------------------------------------------------------------------------------------------------
    def process_account(page,account1,email_Outlook, password,password_Outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street):
        print(Fore.GREEN + email_Outlook)
        # ----------- التنفيذ الرئيسي -----------
        api_instance = ExpressVpnApi()
        connect_vpn(api_instance)
        #time.sleep(1)

        #time.sleep(50)

        try:

            while True:
                try:
                    subprocess.Popen('start shell:AppsFolder\\AppleInc.AppleTVWin_nzyj5cx40ttqa!App', shell=True)

                    try:
                        # البحث عن زر Continue مباشرةً من أي مكان
                       # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Agree')

                        if continue_btn.Exists(10, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")

                    except:
                        print(Fore.RED + "❌ Apple TV is not open")


                    #print("🔍 نحاول نجيب نافذة Apple TV...")
                    #نحاول نجيب نافذة Apple TV
                    apple_tv_window = auto.WindowControl(searchDepth=1, Name="Apple TV")

                    if apple_tv_window.Exists(25, 1):
                        #print("✅ Apple TV مفتوح")
                        apple_tv_window.SetActive()
                        sign_in_item = auto.ListItemControl(Name='Sign in')
               


                        # استناه يظهر لمدة 3 ثواني
                        if sign_in_item.Exists(30, 1):
                            # دور على الـ SelectionItemPattern وشيك لو متاح
                                break
                        else:
                            print("")

                        #break
                    else:
                        print(Fore.RED + "❌ Apple TV is not open")

                except:
                    print(Fore.RED + "❌ Apple TV is not open")

            #////////////////////////////////////////////







            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    #time.sleep(3)
                    # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
                    sign_in_item = auto.ListItemControl(Name='Sign in')
                    sign_in_item.SetFocus() 

                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_item.Exists(30, 1):
                        # دور على الـ SelectionItemPattern وشيك لو متاح
                        selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
                        if selection:
                            #print("ضغطت على الزر باستخدام Select() من غير ماوس")
                            selection.Select()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                    #Sign In

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
                    sign_in_link = auto.HyperlinkControl(Name='Sign In')


                    # استناه يظهر لمدة 3 ثواني
                    if sign_in_link.Exists(30, 1):
                        sign_in_link.SetFocus() 
                        # دور على الـ InvokePattern وشيك لو متاح
                        invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
                            invoke_pattern.Invoke()  # الضغط الفعلي
                            break
                        else:
                            print("")
                    else:
                        print("")
                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

                    

                    


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.1)

                    # حاول تحديد العنصر بناءً على AutomationId
                    create_account_link = auto.Control(Name="Create New Apple Account")


                    # التأكد من أن العنصر موجود
                    if create_account_link.Exists(30, 1):
                        create_account_link.SetFocus()
                        # التأكد من الحصول على نمط Invoke
                        invoke_pattern = create_account_link.GetPattern(auto.PatternId.InvokePattern)
                        if invoke_pattern:
                            #print("الضغط على الرابط باستخدام InvokePattern")
                            invoke_pattern.Invoke()  # تفعيل العنصر
                            break
                    else:
                        print("")


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # تحديد عنصر الـ ComboBox
                    combo_box = auto.Control(AutomationId="iso3CountryCode")



                    # التأكد من أن العنصر موجود
                    if combo_box.Exists(30, 1):
                        combo_box.SetFocus()
                        # الحصول على القيمة الحالية في الـ ComboBox
                        current_value = combo_box.GetPattern(auto.PatternId.ValuePattern).Value

                        # التحقق إذا كانت القيمة الحالية هي "مصر"
                        #if current_value == "United States":
                        if current_value == selected_country:
                            #print("الدولة هي 'مصر' بالفعل.")
                            
                            break
                        else:
                            # التأكد من أن العنصر يدعم ExpandCollapsePattern لفتح القائمة
                            expand_collapse = combo_box.GetPattern(auto.PatternId.ExpandCollapsePattern)
                            if expand_collapse:
                                expand_collapse.Expand()  # فتح القائمة
                                #print("تم فتح القائمة.")

                                #time.sleep(1)  # الانتظار قليلاً لظهور العناصر

                                # البحث عن العنصر "مصر" داخل القائمة
                                United_States_item = auto.ListItemControl(Name=selected_country)

                                if United_States_item.Exists(30):
                                    # التأكد من وجود الـ SelectionItemPattern
                                    selection = United_States_item.GetPattern(auto.PatternId.SelectionItemPattern)
                                    if selection:
                                        #print("تم اختيار مصر.")
                                        selection.Select()  # اختيار العنصر بدون الماوس
                                        break
                                    else:
                                        print("")
                                else:
                                    print("")
                            else:
                                print("")
                    else:
                        print("")



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            




            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions(email_Outlook, password):
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)  # إضافة تأخير بسيط 
                        # تحديد عنصر مربع الاختيار
                        checkbox = auto.Control(AutomationId="agreedToTerms")
                        checkbox.SetFocus()


                        # التأكد من أن العنصر موجود
                        if checkbox.Exists(25, 1):
                            # الحصول على حالة المربع (إذا كان مفعلاً أم لا)
                            toggle_pattern = checkbox.GetPattern(auto.PatternId.TogglePattern)

                            # التحقق إذا كان المربع مفعلًا
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                # تفعيل المربع إذا لم يكن مفعلًا
                                #print("تفعيل مربع 'Terms and Conditions'.")
                                toggle_pattern.Toggle()  # تفعيل المربع


                            # التحقق مرة أخرى إذا كان قد تم تفعيله بنجاح
                            if toggle_pattern.ToggleState == auto.ToggleState.On:
                                print("")
                            else:
                                print("")
                        else:
                            print("")

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")


                    try:

                        # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
                        def set_value_in_field(field, value):
                            field_attempts = 3  # عدد المحاولات
                            field_try = 0
                            while field_try < field_attempts:
                                try:
                                    if field.Exists(25, 1):
                                        field.SetFocus()
                                        value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                        if value_pattern:
                                            value_pattern.SetValue(value)
                                            #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                            return True
                                        else:
                                            print("")
                                            return False
                                    else:
                                        print(f"{field_try+1}).")
                                except Exception as e:
                                    print(f"❌ {field_try+1}): {e}")

                                field_try += 1
                                time.sleep(0.5)  # انتظار نص ثانية قبل إعادة المحاولة
                            Reset()    
                            return False

                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        email_field = auto.Control(Name="Email", AutomationId="acAccountName")
                        password_field = auto.Control(Name="Password", AutomationId="acAccountPassword")
                        verify_password_field = auto.Control(Name="Verify", AutomationId="verifyPassword")

                        # إنشاء الخيوط
                        email_thread = threading.Thread(target=set_value_in_field, args=(email_field, email_Outlook))
                        password_thread = threading.Thread(target=set_value_in_field, args=(password_field, password))
                        verify_password_thread = threading.Thread(target=set_value_in_field, args=(verify_password_field, password))

                        # بدء الخيوط لكتابة القيم في الحقول
                        email_thread.start()
                        password_thread.start()
                        verify_password_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        email_thread.join()
                        password_thread.join()
                        verify_password_thread.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print(Fore.RED + "Creation failed")
                    Reset()

                    return False

            # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
            perform_actions(email_Outlook, password)


#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1


                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
            

#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------







                    
            def set_day():
                day_attempts = 3
                attempt = 0
                while attempt < day_attempts:
                    day_combo = auto.Control(Name="Day")
                    try:
                        if day_combo.Exists(20, 1):
                            day_combo.SetFocus()
                            time.sleep(0.1)
                            keyboard.write("12")
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")
                            value_pattern = day_combo.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                current_value = value_pattern.Value
                                if current_value == "12":
                                    #print("✅ تم اختيار اليوم 12 بنجاح والتأكد من تعيينه.")
                                    return True
                                else:
                                    #print(f"⚠️ تم تنفيذ العملية ولكن القيمة الحالية هي: {current_value}")
                                    return False
                            else:
                                print("")
                                return False
                        else:
                            print("")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                Reset()    
                return False


            def set_month():
                month_attempts = 3
                attempt = 0
                while attempt < month_attempts:
                    month_combo = auto.Control(Name="Month")
                    try:
                        if month_combo.Exists(20, 1):
                            month_combo.SetFocus()
                            keyboard.write("December")  # كتابة ديسمبر في القائمة
                            time.sleep(0.3)
                            keyboard.press_and_release("down")  # الضغط على أسفل لتحديد ديسمبر
                            time.sleep(0.1)
                            keyboard.press_and_release("enter")  # تأكيد الاختيار
                            time.sleep(0.1)
                            keyboard.press_and_release("esc")  # إغلاق النافذة بعد اختيار الشهر
                            
                            # التحقق من القيمة المحددة بعد الاختيار
                            legacy_pattern = month_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "December" in current_value:  # التحقق إذا كان العنصر الذي تم اختياره هو ديسمبر
                                    #print("✅ تم اختيار الشهر December بنجاح (تم التأكد من القيمة عبر Legacy).")
                                    return True
                                else:
                                    #print(f"⚠️ تم اختيار الشهر، لكن القيمة المقروءة كانت: {current_value}")
                                    return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{attempt+1}).")
                    except Exception as e:
                        print(f"{attempt+1}): {e}")
                    
                    attempt += 1
                    time.sleep(0.5)
                
                Reset()
                return False


            # دالة لكتابة القيم في الحقول بشكل متوازي مع محاولات تكرار
            def set_value_in_field(field, value):
                field_attempts = 3  # عدد المحاولات لكل حقل
                field_try = 0
                while field_try < field_attempts:
                    try:
                        if field.Exists(25, 1):
                            field.SetFocus()
                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(value)
                                #print(f"✅ تم كتابة القيمة {value} في الحقل بنجاح.")
                                return True
                            else:
                                print("")
                                return False
                        else:
                            print(f"{field_try+1})")
                    except Exception as e:
                        print(f"❌ {field_try+1}): {e}")
                    
                    field_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة
                Reset()    
                return False

            # دالة لتفعيل مربع الاختيار وكتابة القيم في الحقول بشكل متوازي
            def perform_actions():
                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        # استدعاء دالة الكتابة في الحقول بشكل متوازي
                        firstName_field = auto.Control(Name="First Name", AutomationId="firstName")
                        lastName_field = auto.Control(Name="Last Name", AutomationId="lastName")
                        birthYear_field = auto.Control(Name="YYYY", AutomationId="birthYear")

                        # إنشاء الخيوط
                        firstName_thread = threading.Thread(target=set_value_in_field, args=(firstName_field, first_name))
                        lastName_thread = threading.Thread(target=set_value_in_field, args=(lastName_field, last_name))
                        birthYear_thread = threading.Thread(target=set_value_in_field, args=(birthYear_field, "2000"))

                        # بدء الخيوط لكتابة القيم في الحقول
                        firstName_thread.start()
                        lastName_thread.start()
                        birthYear_thread.start()

                        # الانتظار حتى تكتمل جميع الخيوط
                        firstName_thread.join()
                        lastName_thread.join()
                        birthYear_thread.join()

                        # تشغيل خيوط اليوم والشهر معًا
                        thread_day = threading.Thread(target=set_day)
                        thread_month = threading.Thread(target=set_month)

                        # بدء الخيوط لكتابة القيم في الحقول
                        thread_day.start()
                        time.sleep(0.2)
                        thread_month.start()

                        # انتظار انتهاء التنفيذ
                        thread_day.join()
                        thread_month.join()

                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying... {e}")

                if attempt == max_attempts:
                    print("❌ The operation failed after several attempts.")
                    Reset()
                    return False

            # تنفيذ العملية
            perform_actions()







#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------


            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    

                    if continue_btn.Exists(4, 1):
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1



                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False

            def none():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="None")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False

            def bank():

                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0

                while attempt < max_attempts:
                    
                    try:

                        # تحديد عنصر الـ RadioButton (بناءً على التفاصيل التي قدمتها)
                        radio_button = auto.RadioButtonControl(Name="iDEAL")

                        # التأكد من وجود العنصر
                        if radio_button.Exists(25, 1):
                            #print("✅ Found زر الراديو.")
                            radio_button.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                            #time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                            # محاولة الحصول على SelectionItemPattern للتحقق من حالة التحديد
                            selection_pattern = radio_button.GetPattern(auto.PatternId.SelectionItemPattern)
                            if selection_pattern:
                                # التحقق مما إذا كان العنصر غير محدد بالفعل
                                if not selection_pattern.IsSelected:
                                    # محاولة الحصول على InvokePattern للضغط على العنصر
                                    invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                    if invoke_pattern:
                                        invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                        #print("✅ تم الضغط على زر الراديو.")
                                        
                                        # انتظار قليل للتحقق من التحديد
                                        #time.sleep(1)
                                        
                                        # التحقق من أنه تم تحديده
                                        if selection_pattern.IsSelected:
                                            #print("✅ تم تحديد زر الراديو بنجاح.")
                                            break
                                        else:
                                            print("")
                                    else:
                                        print("")
                                else:
                                    #print("✅ زر الراديو محدد بالفعل.")
                                    break
                            else:
                                # إذا لم يكن العنصر يدعم SelectionItemPattern، نتحقق من `LegacyIAccessible`
                                legacy_accessible = radio_button.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_accessible:
                                    if legacy_accessible.State == 0x2D:  # التحقق من حالة التحديد
                                        ##print("✅ زر الراديو محدد بالفعل.")
                                        break
                                    else:
                                        # محاولة الحصول على InvokePattern للضغط على العنصر
                                        invoke_pattern = radio_button.GetPattern(auto.PatternId.InvokePattern)
                                        if invoke_pattern:
                                            invoke_pattern.Invoke()  # محاكاة الضغط على زر الراديو
                                            #break
                                            #print("✅ تم الضغط على زر الراديو.")
                                            
                                        # انتظار قليل للتحقق من التحديد
                                            time.sleep(0.5)
                                            
                                            #التحقق من أنه تم تحديده
                                            if legacy_accessible.State == 0x2D:
                                                #print("✅ تم تحديد زر الراديو بنجاح.")
                                                break
                                            else:
                                                print("")
                                        else:
                                            print("")
                                else:
                                    print("")
                        else:
                            print("")

                    except:
                        attempt += 1
                        print(f"Attempt {attempt} failed, retrying...")

                        #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

                if attempt == max_attempts:
                    print(Fore.RED +"Creation failed")
                    Reset()
                    return False
                



                state_attempts = 3  # عدد المحاولات
                state_try = 0
                while state_try < state_attempts:
                    try:
                        State_combo = auto.Control(AutomationId="partnerBankId")
                        if State_combo.Exists(25, 1):
                            # التحقق من القيمة الحالية قبل محاولة التغيير
                            legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                            if legacy_pattern:
                                current_value = legacy_pattern.Value
                                if "ABN Amro" in current_value:
                                    print("✅ الدولة 'ABN Amro' محددة بالفعل.")
                                    return True  # لا حاجة لتغييرها
                                else:
                                    State_combo.SetFocus()
                                    keyboard.write("ABN Amro")
                                    time.sleep(0.1)
                                    keyboard.press_and_release("enter")
                                    keyboard.press_and_release("esc")

                                    legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                    if legacy_pattern:
                                        current_value = legacy_pattern.Value
                                        if "ABN Amro" in current_value:
                                            #print("✅ تم اختيار الولاية New York بنجاح والتأكد من تعيينها.")
                                            return True
                                        else:
                                            #print(f"⚠️ تم اختيار الولاية، لكن القيمة المقروءة كانت: {current_value}")
                                            return False
                                    else:
                                        #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                        return False
                            else:
                                #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                return False
                        else:
                            print(f"{state_try+1}).")
                    except Exception as e:
                        print(f"{state_try+1}): {e}")

                    state_try += 1
                    time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية
                Reset()    
                return False















#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
            try:
                if selected_country == "Netherlands":
                    bank()  # استدعاء دالة bank في حالة نيوزيلندا
                else:
                    none()  # استدعاء دالة none في أي حالة أخرى

            except Exception as e:
                print(f"Error occurred: {e}")


#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

            try:
                if selected_country == "United States":
                    united_states(street, address_data)
                elif selected_country == "Egypt":
                    EgyptAddress(street, address_data)
                elif selected_country == "South Africa":
                    South_AfricaAddress(street, address_data)
                elif selected_country == "Hong Kong":
                    hong_kong_adresses(street, address_data)
                elif selected_country == "Germany":
                    germany_address(street, address_data)
                elif selected_country == "France":
                    france_address(street, address_data)
                elif selected_country == "Canada":
                    canada_address(street, address_data)
                elif selected_country == "Indonesia":
                    indonesia_address(street, address_data)
                elif selected_country == "Netherlands":
                    netherlands_address(street, address_data)
                elif selected_country == "Mexico":
                    mexico_address(street, address_data)
                elif selected_country == "Kazakhstan":
                    kazakhstan_address(street, address_data)
                elif selected_country == "Japan":
                    japan_address(street, address_data)
                elif selected_country == "Nigeria":
                    nigeria_address(street, address_data)
                elif selected_country == "Slovenia":
                    slovenia_address(street, address_data)
                elif selected_country == "Slovakia":
                    slovakia_address(street, address_data)
                elif selected_country == "Spain":
                    spain_address(street, address_data)
                elif selected_country == "Thailand":
                    thailand_address(street, address_data)
                elif selected_country == "United Kingdom":
                    uk_address(street, address_data)
                elif selected_country == "Bolivia":
                    bolivia_address(street, address_data)
                elif selected_country == "Italy":
                    italy_address(street, address_data)
                else:
                    return False

            except Exception as e:
                print(f"Error occurred: {e}")
            





#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------




            max_attempts = 3  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:

                    # البحث عن زر Continue مباشرةً من أي مكان
                    continue_btn = auto.ButtonControl(Name='Continue')
                    
                    if continue_btn.Exists(5, 1):
                        continue_btn.SetFocus()
                        #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                        invoke = continue_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                            #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            break
                        else:
                            print("")

                    else:
                        print("❌ The button is not present.")
                        attempt += 1




                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة

            if attempt == max_attempts:
                print(Fore.RED +"Creation failed")
                Reset()
                return False
    #////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////







    #/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            try:
    


            #     max_retries = 4  # عدد المحاولات القصوى
            #     retry_count = 0
            #     selection_successful = False

            #     while retry_count < max_retries and not selection_successful:
            #         try:
            #             time.sleep(1)
            #             #print(f"\n🔄 المحاولة رقم {retry_count + 1} لاختيار الدولة...")

            #             # --- اختيار الدولة من القائمة المنسدلة ---
            #             target_country_name = " United States (+1) "
            #             #target_country_name = " Hong Kong (+852) "
            #             combo_box_automation_id = "countryDialCode"

            #             #print(f"🔍 جاري البحث عن مربع اختيار الدولة (AutomationId='{combo_box_automation_id}')...")
            #             country_combo = apple_tv_window.ComboBoxControl(AutomationId=combo_box_automation_id)

            #             if country_combo.Exists(30):
            #                 #print("✅ Found مربع اختيار الدولة.")
            #                 expand_collapse_pattern = country_combo.GetPattern(auto.PatternId.ExpandCollapsePattern)

            #                 if expand_collapse_pattern:
            #                     if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Collapsed:
            #                         #print("📂 جاري فتح قائمة الدول...")
            #                         expand_collapse_pattern.Expand()
            #                         time.sleep(1)
            #                         ##print("✅ تم فتح القائمة.")
            #                     else:
            #                         print("ℹ️ قائمة الدول مفتوحة بالفعل.")

            #                     #print(f"🔍 جاري البحث عن عنصر القائمة: '{target_country_name}'...")
            #                     list_item = apple_tv_window.ListItemControl(Name=target_country_name)

            #                     if list_item.Exists(5, 1):
            #                         #print(f"✅ Found عنصر '{target_country_name}'.")

            #                         selection_made = False
            #                         selection_pattern = list_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #                         if selection_pattern:
            #                             #print(f"📌 جاري تحديد '{target_country_name}' باستخدام Select()...")
            #                             selection_pattern.Select()
            #                             #print(f"✅ تم اختيار '{target_country_name}' بنجاح.")
            #                             selection_made = True
            #                         elif list_item.IsPatternAvailable(auto.PatternId.InvokePattern):
            #                             #print(f"⚠️ Select غير مدعوم، جاري تجربة Invoke()...")
            #                             invoke_pattern = list_item.GetPattern(auto.PatternId.InvokePattern)
            #                             invoke_pattern.Invoke()
            #                             #print(f"✅ تم استدعاء Invoke() لـ '{target_country_name}'.")
            #                             selection_made = True
            #                         else:
            #                             print("❌ العنصر لا يدعم SelectionItemPattern ولا InvokePattern.")

            #                         if selection_made:
            #                             time.sleep(0.2)
            #                             if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                                 #print("🔒 القائمة لا تزال مفتوحة، جاري إغلاقها...")
            #                                 expand_collapse_pattern.Collapse()
            #                                 ##print("✅ تم إغلاق القائمة.")
            #                             else:
            #                                 print("ℹ️ القائمة أغلقت تلقائيًا بعد الاختيار.")
            #                             selection_successful = True  # تم بنجاح ✅

            #                     else:
            #                         #print(f"❌ لم يFound '{target_country_name}'.")
            #                         if expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                             #print("🔒 جاري إغلاق القائمة...")
            #                             expand_collapse_pattern.Collapse()

            #                 else:
            #                     print("❌ مربع اختيار الدولة لا يدعم ExpandCollapsePattern.")
            #             else:
            #                 print(f"❌ لم يFound ComboBox الخاص بالدولة.")

            #         except Exception as e:
            #             print(f"💥 حدث استثناء أثناء المحاولة: {e}")
            #             # محاولة إغلاق القائمة إذا لزم
            #             try:
            #                 if expand_collapse_pattern and expand_collapse_pattern.ExpandCollapseState == auto.ExpandCollapseState.Expanded:
            #                     #print("🔒 إغلاق القائمة بعد الخطأ...")
            #                     expand_collapse_pattern.Collapse()
            #             except:
            #                 pass

            #         retry_count += 1

            #     if not selection_successful:
            #         print("❌ فشل اختيار الدولة بعد كل المحاولات.")
            #     else:
            #         print("✅ تم اختيار الدولة بنجاح.")

            #     #print("🏁 اكتملت محاولة اختيار الدولة.\n")


                def setcountryDialCode():
                    state_attempts = 3  # عدد المحاولات
                    state_try = 0
                    while state_try < state_attempts:
                        try:
                            State_combo = auto.Control(AutomationId="countryDialCode")
                            if State_combo.Exists(25, 1):
                                # التحقق من القيمة الحالية قبل محاولة التغيير
                                legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                if legacy_pattern:
                                    current_value = legacy_pattern.Value
                                    if "United States (+1)" in current_value:
                                        #print("✅ الدولة 'United States (+1)' محددة بالفعل.")
                                        return True  # لا حاجة لتغييرها
                                    else:
                                        State_combo.SetFocus()
                                        keyboard.write("United States (+1)")  # كتابة الدولة بشكل صحيح
                                        time.sleep(0.2)  # زيادة التأخير للتأكد من الكتابة
                                        keyboard.press_and_release("enter")
                                        time.sleep(0.2)  # تأخير بسيط بعد الضغط على Enter
                                        keyboard.press_and_release("esc")
                                        time.sleep(0.1)  # تأخير بسيط بعد الخروج

                                        # التحقق من القيمة بعد التغيير
                                        legacy_pattern = State_combo.GetPattern(auto.PatternId.LegacyIAccessiblePattern)
                                        if legacy_pattern:
                                            current_value = legacy_pattern.Value
                                            if "United States (+1)" in current_value:
                                                #print("✅ تم اختيار الدولة 'United States (+1)' بنجاح.")
                                                return True
                                            else:
                                                #print(f"⚠️ تم اختيار دولة أخرى، لكن القيمة المقروءة كانت: {current_value}")
                                                return False
                                        else:
                                            #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                            return False
                                else:
                                    #print("⚠️ لم يتم العثور على LegacyIAccessiblePattern، قد لا تكون القيمة قابلة للقراءة.")
                                    return False
                            else:
                                print(f"{state_try+1}).")
                        except Exception as e:
                            print(f"{state_try+1}): {e}")

                        state_try += 1
                        time.sleep(0.5)  # انتظار نصف ثانية قبل المحاولة مرة ثانية

                    Reset()
                    return False






    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------
    #---------------------------------------------------------------------------------------------------------------------------     
    #-----------------------------------------------------------------------------------------------------------------------------
    

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------

    




                setcountryDialCode()

                def perform_actions():
                    max_attempts = 3  # عدد المحاولات القصوى
                    attempt = 0
                    while attempt < max_attempts:
                        try:
                            # كتابة القيم في الحقول بشكل متوازي
                            def set_value_in_field(field, value):
                                field_attempts = 3  # عدد محاولات لكل حقل
                                field_try = 0
                                while field_try < field_attempts:
                                    try:
                                        if field.Exists(10, 1):
                                            field.SetFocus()
                                            value_pattern = field.GetPattern(auto.PatternId.ValuePattern)
                                            if value_pattern:
                                                value_pattern.SetValue(value)
                                                time.sleep(0.3)  # نعطي مهلة صغيرة للكتابة قبل التأكد
                                                
                                                # تحقق بعد الكتابة
                                                current_value = value_pattern.Value
                                                if current_value.strip() == value.strip():
                                                    # ✅ تم التأكد أن القيمة المكتوبة صحيحة
                                                    return True
                                                else:
                                                    print(f"⚠️ {field_try+1}")
                                            else:
                                                print(f"⚠️ {field_try+1} ")
                                        else:
                                            print(f"⚠️ {field_try+1} ")
                                    except Exception as e:
                                        print(f"❌{field_try+1}: {e}")
                                    
                                    field_try += 1
                                    time.sleep(0.5)  # انتظار نصف ثانية قبل إعادة المحاولة

                                # بعد انتهاء المحاولات بدون نجاح
                                Reset()
                                return False



                            # استدعاء دالة الكتابة في الحقول بشكل متوازي
                            Areacode_field = auto.Control(Name="Area code", AutomationId="phoneOfficeAreaCode")
                            Phone_field = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                            # إنشاء الخيوط
                            Areacode_thread = threading.Thread(target=set_value_in_field, args=(Areacode_field, phone[:3]))
                            Phone_thread = threading.Thread(target=set_value_in_field, args=(Phone_field, phone[3:]))

                            # بدء الخيوط لكتابة القيم في الحقول
                            Areacode_thread.start()
                            time.sleep(0.1)
                            Phone_thread.start()

                            # الانتظار حتى تكتمل جميع الخيوط
                            Areacode_thread.join()
                            Phone_thread.join()

                            break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                        except Exception as e:
                            attempt += 1
                            print(f"❌ Attempt {attempt} failed, retrying... {e}")
                            time.sleep(1)

                    if attempt == max_attempts:
                        print(Fore.RED + "❌ Creation failed.")
                        Reset()
                        return False


                # تنفيذ تفعيل مربع الاختيار وكتابة القيم في الحقول في نفس الوقت
                perform_actions()




#-----------------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------


                # time.sleep(1)

                # # تحديد الحقل باستخدام Name و AutomationId
                # phoneOfficeNumber = auto.Control(Name="Phone", AutomationId="phoneOfficeNumber")

                # if phoneOfficeNumber.Exists(30):
                #     try:
                #         phoneOfficeNumber.SetFocus()  # 👈 إعطاء التركيز للحقل بدون ماوس
                #         time.sleep(0.1)  # تأخير بسيط عشان ياخد التركيز تماماً
                #         value_pattern = phoneOfficeNumber.GetPattern(auto.PatternId.ValuePattern)
                #         if value_pattern:
                #             value_pattern.SetValue(phone)
                #             print("✅ phone Office Number")
                #         else:
                #             print("")
                #     except Exception as e:
                #         print(f"❌ حصل استثناء أثناء الكتابة: {e}")
                # else:
                #     print("❌ لم يFound الحقل.")


                max_attempts = 3  # عدد المحاولات القصوى
                attempt = 0
                while attempt < max_attempts:
                    try:
                        time.sleep(0.2)

                        # البحث عن زر Continue مباشرةً من أي مكان
                        continue_btn = auto.ButtonControl(Name='Continue')
                    
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            #print("✅ الزر موجود، هنضغط عليه باستخدام InvokePattern...")
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على الزر بنجاح بدون Click.")
                            else:
                                print("")

                        else:
                            print("❌ The button is not present.")
                            attempt += 1


                        break  # إذا تم التفعيل والكتابة بنجاح نخرج من الحلقة

                    except Exception as e:
                        attempt += 1
                        print(f"❌ Attempt {attempt} failed, retrying... {e}")
                        time.sleep(1)

                if attempt == max_attempts:
                    print(Fore.RED + "❌ Creation failed.")
                    Reset()
                    return False


                try:
                    time.sleep(0.2)

                    otp = get_otp(otp_link)

                    # تحديد الحقل باستخدام Name و AutomationId
                    otp_Code1 = auto.Control(Name="Code", AutomationId="phoneSecretCode")
                    otp_attempts = 3  # عدد المحاولات
                    otp_try = 0

                    while otp_try < otp_attempts:
                        try:
                            if otp_Code1.Exists(25, 1):
                                otp_Code1.SetFocus()
                                value_pattern = otp_Code1.GetPattern(auto.PatternId.ValuePattern)
                                if value_pattern:
                                    value_pattern.SetValue(otp)
                                    #print(f"✅ تم كتابة كود OTP {otp} بنجاح.")
                                    break
                                else:
                                    print("")
                                    break
                            else:
                                print(f"{otp_try+1}).")
                        except Exception as e:
                            print(f"{otp_try+1}): {e}")

                        otp_try += 1
                        time.sleep(0.5)  # انتظار قبل إعادة المحاولة
                    else:
                        #print("❌ لم يتم العثور على الحقل بعد جميع المحاولات.")
                        error_Number(phone)
                        return False

                except Exception as e:
                    print(f" {e}")
                    error_Number(phone)
                    Reset()
                    return False
                    

                time.sleep(0.1)

                # البحث عن زر Verify
                continue_btn = auto.ButtonControl(Name='Verify')
                btn_attempts = 3  # عدد المحاولات
                btn_try = 0

                while btn_try < btn_attempts:
                    try:
                        if continue_btn.Exists(5, 1):
                            continue_btn.SetFocus()
                            invoke = continue_btn.GetInvokePattern()
                            if invoke:
                                invoke.Invoke()
                                #print("✅ تم الضغط على زر Verify بنجاح.")
                                break
                            else:
                                #print("❌ الزر لا يدعم InvokePattern.")
                                break
                        else:
                            print(f"{btn_try+1}).")
                    except Exception as e:
                        print(f"{btn_try+1}): {e}")

                    btn_try += 1
                    time.sleep(0.5)  # انتظار قبل المحاولة التالية
                else:
                    print("")
                    Reset()
                    return False



                try:
                # محاولة العثور على الرسالة
                    message = auto.TextControl(Name="Phone code verification failed.")

                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message.Exists(5, 1):
                        #print("✅ Found رسالة فشل التحقق من الكود.")
                        
                        Reset()
                        return False

                    else:
                        #print(Fore.RED +"❌ Verification code failure message not found.")
                        print("")

                except:
                    print("Message not found.")
                

            except:
                print(f"❌ Error processing the number {phone}")
                
                return False
            

            # التحقق من رسالة السابورت
            try:
                support_message = auto.TextControl(Name="We've run into a problem. Please try again later.")
                if support_message.Exists(5, 1):
                    #print("✅ Found رسالة السابورت.")
                    #print(support_message)
                    Reset()
                    return False  
            except:
                print(f"❌ Message not found or exception occurred.")

            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                try:
                    # جلب كود OTP
                    otp_code = get_code_Outlook(page, email_Outlook)
                    if not otp_code or not otp_code.strip():
                        print("❌ OTP code is empty or not retrieved.")
                        Reset()
                        return False
                        

                    # إدخال كود OTP
                    otp_input = auto.Control(Name="Code", AutomationId="secretCode")
                    if otp_input.Exists(25, 1):
                        try:
                            otp_input.SetFocus()
                            time.sleep(0.2)
                            value_pattern = otp_input.GetPattern(auto.PatternId.ValuePattern)
                            if value_pattern:
                                value_pattern.SetValue(otp_code)
                            else:
                                print("❌ Field does not support ValuePattern.")
                        except:
                            print(f"❌ Exception occurred during code input.")
                    else:
                        print("❌ Code input field not found.")

                    # الضغط على زر Verify
                    verify_btn = auto.ButtonControl(Name='Verify')
                    if verify_btn.Exists(4, 1):
                        invoke = verify_btn.GetInvokePattern()
                        if invoke:
                            invoke.Invoke()
                        else:
                            print(Fore.RED + "❌ Button does not support Invoke.")
                    else:
                        print("❌ Verify button not found.")

                    # الانتظار لمدة 10 ثواني عشان نشوف إذا ظهرت رسالة فشل التحقق
                    #time.sleep(10)

                    # التحقق من ظهور رسالة "فشل التحقق"
                    message = auto.TextControl(Name="Phone code verification failed.")
                    if message.Exists(5, 1):  # يتحقق في خلال ثانيتين
                        print("❌ Phone code incorrect, retrying...")
                        Reset()
                        return False

                    #print("✅ Verification successful.")
                    break  # خرج من اللوب لو ما ظهرتش رسالة الفشل

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying due to error...")

            if attempt == max_attempts:
                print("❌ All attempts failed, proceeding with emergency steps...")
                # ----------- التنفيذ الرئيسي -----------

                api_instance = ExpressVpnApi()
                disconnect_vpn(api_instance)
                # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                api_instance.close()
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False


        


            max_attempts = 2  # عدد المحاولات القصوى
            attempt = 0

            while attempt < max_attempts:
                
                try:
                    time.sleep(0.2)
                    # محاولة العثور على الرسالة
                    message4 = auto.TextControl(Name="Sign In to Your Apple Account" , AutomationId="messageText")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message4.Exists(13, 1):
                        break  # إذا نجح الضغط وظهر العنصر، نخرج من الحلقة

                    else:
                        print(Fore.RED +"❌ Verification code failure message not found.")
                        attempt += 1  # مهم جداً عشان يحسب المحاولة

                except:
                    attempt += 1
                    print(f"Attempt {attempt} failed, retrying...")

                    #time.sleep(1)  # انتظر ثانية قبل إعادة المحاولة


                try:
                    # محاولة العثور على الرسالة
                    message3 = auto.TextControl(Name="For assistance, contact iTunes Support at www.apple.com/support/itunes/ww/.")
                    # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
                    if message3.Exists(2, 1):
                        #print("✅ Found رسالة السابورت.")
                        #print(message3)
                        # ----------- التنفيذ الرئيسي -----------


                        api_instance = ExpressVpnApi()
                        connect_vpn(api_instance)
                        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
                        #api_instance.close()

                        Reset()
                        run_spoof_all_console()

                        log_files = ["spoof_log.txt"]

                        for file in log_files:
                            if os.path.exists(file):
                                os.remove(file)
                                #print(f"✅ تم حذف {file}") 
                            else:
                                print("")   

                        return False   
                    else:
                        #print("NO Support")
                        print("")
                except Exception as e:
                    print("")


            if attempt == max_attempts:
                print("Creation failed")
                # ----------- التنفيذ الرئيسي -----------
                Reset()
                run_spoof_all_console()

                log_files = ["spoof_log.txt"]

                for file in log_files:
                    if os.path.exists(file):
                        os.remove(file)
                        #print(f"✅ تم حذف {file}") 
                    else:
                        print("")   

                return False

    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/

            # try:
            #     time.sleep(0.2)
            #     # محاولة العثور على الرسالة
            #     message5 = auto.TextControl(Name=email)
            #     # إذا كانت الرسالة موجودة في خلال 5 ثوانٍ
            #     if message5.Exists(25):
            #         #print(f"✅ {email}")
            #         print(message5)

            #         # محاولة العثور على زر "OK"
            #         Continue_button = auto.ButtonControl(Name="Continue")
                    
            #         if Continue_button.Exists(2, 1):  # التأكد من وجود الزر
            #             #print("✅ Found زر OK.")
            #             invoke = Continue_button.GetInvokePattern()
            #             if invoke:
            #                 invoke.Invoke()
            #                 #print("✅ تم الضغط على زر OK.")

            #             else:
            #                 print(Fore.RED + "❌ Button does not support Invoke.")
            #         else:
            #             print("")
            #     else:
            #         print(Fore.RED +"❌ Verification code failure message not found.")


            # except Exception as e:
            #     print(f" {e}")

            
            # try:
            #     # دور على العنصر من النوع ListItem اللي اسمه "Sign in"
            #     sign_in_item = auto.ListItemControl(Name=full_name)

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_item.Exists(15):
            #         # دور على الـ SelectionItemPattern وشيك لو متاح
            #         selection = sign_in_item.GetPattern(auto.PatternId.SelectionItemPattern)
            #         if selection:
            #             #print("ضغطت على الزر باستخدام Select() من غير ماوس")
            #             selection.Select()  # الضغط الفعلي
            #         else:
            #             print("")
            #     else:
            #         print("Element not found.")
            #     #Sign In
            #     # دور على العنصر اللي اسمه "Sign In" ونوعه Hyperlink
            #     sign_in_link = auto.HyperlinkControl(Name='Sign Out')

            #     # استناه يظهر لمدة 3 ثواني
            #     if sign_in_link.Exists(15):
            #         # دور على الـ InvokePattern وشيك لو متاح
            #         invoke_pattern = sign_in_link.GetPattern(auto.PatternId.InvokePattern)
            #         if invoke_pattern:
            #             #print("ضغطت على الرابط باستخدام InvokePattern من غير ماوس")
            #             invoke_pattern.Invoke()  # الضغط الفعلي
            #         else:
            #             print("Button does not support InvokePattern.")
            #     else:
            #         print("Element not found.")
            # except Exception as e:
            #     print(f"خطأ أثناء تسجيل الخروج : {e}")
            #     #return False
            #     #print(f"خطأ أثناء تسجيل الخروج : {e}")
    #/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/-/
            save_new_account(email_Outlook, password, phone, otp_link)  # استدعاء success بدون output_file
            success_Outlooks(account1)
            #time.sleep(1)

            api_instance = ExpressVpnApi()
            disconnect_vpn(api_instance)
            # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
            api_instance.close()
            Reset()
            run_spoof_all_console()
            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")   

            return True
        except Exception as e:
            print(f"File update error: {e}")

            api_instance = ExpressVpnApi()
            disconnect_vpn(api_instance)
            # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
            api_instance.close()
            Reset()
            run_spoof_all_console()
            log_files = ["spoof_log.txt"]

            for file in log_files:
                if os.path.exists(file):
                    os.remove(file)
                    #print(f"✅ تم حذف {file}") 
                else:
                    print("")            
    
            return False









    # def get_verification_code_from_tempmail(page):

    #     retries = 5
    #     while retries > 0:
    #         try:
    #             #print("📨 في انتظار رسالة Apple...")
    #             page.wait_for_load_state()

    #             # نلاقي رسالة Apple
    #             apple_email_locator = page.locator("div.subject", has_text="Verify your Apple Account email address")
    #             if not apple_email_locator.is_visible():
    #                 print("❌ رسالة Apple مش ظهرت لسه.")
    #                 return None

    #             #print("✅ Found رسالة Apple.")

    #             # نضغط على الزر الخاص بفتح الرسالة
    #             parent_message = apple_email_locator.locator("xpath=ancestor::div[contains(@class, 'd-flex')]")
    #             open_button = parent_message.locator("button.open-message")
    #             open_button.click()

    #             # ننتظر انتقال الصفحة
    #             page.wait_for_url("**/message/**", timeout=40000)
    #             #print("📄 تم فتح الرسالة...")

    #             # انتظار ظهور iframe باستخدام CSS selector أو XPath
    #             #print("انتظار ظهور iframe...")
    #             iframe_locator = page.frame_locator("iframe.d-block")  # تحديد iframe بناءً على الكلاس أو معرّف آخر
                
    #             # التفاعل مباشرة مع كائن FrameLocator
    #             #print("استخراج محتوى الرسالة من داخل iframe...")
    #             otp_element = iframe_locator.locator("//html/body/div/div/div[2]/div/div/p/b")  # XPath الخاص بالكود داخل الإطار
    #             otp_element.wait_for(state="visible", timeout=40000)  # الانتظار حتى يصبح العنصر مرئيًا

    #             # استخراج النص من العنصر
    #             otp = otp_element.inner_text()  # استخراج النص من العنصر
    #             print(f"🔐 code:  {otp}")
    #             return otp
            
    #         except Exception as e:
    #             print(f"🚫 خطأ أثناء استخراج الكود: {str(e)}")
    #             retries -= 1
    #             page.reload()
    #             page.wait_for_load_state()
    #             time.sleep(6)

    #     raise Exception("OTP not found after several attempts.")








    # دالة لمعالجة الحسابات
    def process_Outlook_account(page, email_Outlook, password_Outlook, account1 ):

        api_instance = ExpressVpnApi()
        disconnect_vpn(api_instance)
        # تأكد من إغلاق الاتصال بشكل نظيف في النهاية
        api_instance.close()

        try:
            # الانتقال إلى صفحة تسجيل الدخول
            page.goto("https://login.live.com/")

            # الكتابة داخل حقل الإيميل
            page.locator('input[type="email"]').fill(email_Outlook)

            # قائمة اللوكيتورز المتوقعة
            # selectors = [
            #     'input#i0116',
            #     'input#usernameEntry',
            #     'input[name="loginfmt"]',
            #     'input[type="email"]',
            #     'input[aria-describedby*="validationMessage"]',
            # ]

            # # جرب تملأ أول حقل ظاهر
            # for selector in selectors:
            #     locator = page.locator(selector)
            #     try:
            #         if locator.is_visible():
            #             locator.fill(email)
            #             print(f"✅ كتب الإيميل في: {selector}")
            #             break
            #     except Exception as e:
            #         print(f"⚠️ Failed with {selector}: {e}")

            #         continue


            # الكتابة داخل الحقل باستخدام الـ id
            #page.fill('input[name="loginfmt', email)

            # الضغط على زر التالي

                        # اضغط على الزر اللي فيه كلمة Next
            page.locator("button", has_text="Next").click(force=True)

            #page.click('button#idSIButton9', force=True)

            page.wait_for_selector('input[name="passwd"]')


            # إدخال كلمة المرور
            #page.fill('input[type="password_Outlook"]', password)
            page.locator('input[name="passwd"]').fill(password_Outlook)

            # الضغط على زر التالي
            #page.click('button#idSIButton9', force=True)

            

            # قائمة اللوكيتورز المتوقعة
            selectors = [
                'button#idSIButton9',
                'button[data-testid="primaryButton"]',
                'button:has-text("Next")',
                'button[type="submit"]',
            ]

            # جرب تملأ أول حقل ظاهر
            for selector in selectors:
                locator = page.locator(selector)
                try:
                    locator.wait_for(state="visible", timeout=5000)
                    if locator.is_visible():
                        locator.click(force=True)
                        print(f"✅ Done {selector}")
                        break
                except Exception as e:
                    print(f"⚠️ Failed with {selector}: {e}")

                    continue
            page.wait_for_load_state()


    #//////////////////////////////////////////////////////////////////////////////////////////////

            # إعادة تحميل الصفحة بعد بعض العمليات
            #await page.reload(wait_until='domcontentloaded')

            # التحقق من وجود أي من الرسائل الخطأ (حساب مغلق أو كلمة مرور غير صحيحة)
            # تحقق إذا كانت أي من الرسائل التالية ظهرت:
            try:
                page.wait_for_selector(
                    '#serviceAbuseLandingTitle, #serviceAbuseDescription, #idTD_Error, #i0118Error', timeout=6000)
                print("Found an error message in the account or the account is closed.")

                log_error_Outlooks(account1)
                return False  # الانتقال للحساب التالي في المدخلات
            except:
                print(f"NO error")
                    # إغلاق المتصفح والانتقال للحساب التالي
            page.wait_for_load_state()


            try:
                # انتظر الزر اللي فيه النص "OK" يظهر في أي مكان بالصفحة
                page.wait_for_selector('button:has-text("OK")', timeout=1000)
                page.click('button:has-text("OK")', force=True)
                #print("✅ تم الضغط على الزر OK.")
            except:
                print("⚠️ The OK button did not appear within the timeout.")

            page.wait_for_load_state()


            try:
                # انتظر ظهور أي زر من التلاتة (Yes أو primaryButton)
                # انتظر ظهور أي زر من التلاتة (Yes أو primaryButton)
                BUTTUN_clik= page.wait_for_selector('#acceptButton, #id__0, button[data-testid="primaryButton"] , a#action-oc5b26 , text=Sign in , button:has-text("Sign in") , button:has-text("OK") ', timeout=6000)
                BUTTUN_clik.click(force=True)
                #print("✅ تم الضغط على أحد الأزرار (Yes أو PrimaryButton).")
            except:
                pass  # تجاهل لو مفيش أي زر ظهر

            page.wait_for_load_state()
            page.goto('https://outlook.live.com/mail/0/')
            page.wait_for_load_state()

            try:
                # انتظر ظهور أي زر من التلاتة (Yes أو primaryButton)
                BUTTUN_clik= page.wait_for_selector('#acceptButton, #id__0, button[data-testid="primaryButton"] , a#action-oc5b26 , text=Sign in , button:has-text("Sign in") , button:has-text("OK") ', timeout=6000)
                BUTTUN_clik.click(force=True)
                #print("✅ تم الضغط على أحد الأزرار (Yes أو PrimaryButton).")
            except:
                pass  # تجاهل لو مفيش أي زر ظهر
            page.wait_for_load_state()

            return True
        except Exception as e:
            print(f"An error occurred while processing the account {email_Outlook}: {e}")

            log_error_Outlooks(account1)
            return False



    #//////////////////////////////////////////////////////////////////////////////////////////////

    def return_otp(page):
        #page.reload()
        page.goto('https://outlook.live.com/mail/0/')
        page.wait_for_load_state()

        try:
            # انتظر ظهور أي زر من التلاتة (Yes أو primaryButton)
            BUTTUN_clik= page.wait_for_selector('#acceptButton, #id__0, button[data-testid="primaryButton"] , a#action-oc5b26 , text=Sign in , button:has-text("Sign in") , button:has-text("OK") ', timeout=6000)
            BUTTUN_clik.click(force=True)
            #print("✅ تم الضغط على أحد الأزرار (Yes أو PrimaryButton).")
        except:
            pass  # تجاهل لو مفيش أي زر ظهر

        # الانتظار حتى يتم تحميل الرسائل
        page.wait_for_selector('div.S2NDX')  # تأكد من وجود العنصر الذي يدل على تحميل الصفحة
        #time.sleep(1)



    #//////////////////////////////////////////////////////////////////////////////////////////////
            

    def get_code_Outlook(page, email_Outlook):



        try:
        #     return_otp(page)
        #     #page.wait_for_load_state("domcontentloaded", timeout=20000)


        # # التعامل مع الرسالة الجديدة (زر "Yes")
        #     try:
        #         page.wait_for_selector('#acceptButton, #id__0', timeout=2000)
        #         page.click('#acceptButton, #id__0', force=True)  # الضغط على زر Yes إذا ظهر
        #     except:
        #         pass  # تجاهل إذا لم تظهر الرسالة


            #page.wait_for_navigation(wait_until='domcontentloaded')  # انتظار تحميل الصفحة
            #time.sleep(1)

            return_otp(page)

            # استخراج كود التحقق من الرسالة باستخدام BeautifulSoup و Regular Expressions
            def extract_verification_code_from_message(html_content):
                soup = BeautifulSoup(html_content, 'html.parser')

                # البحث عن جميع العناصر التي تحتوي على الكلاس jGG6V
                messages = soup.find_all(class_='jGG6V')

                # البحث في كل رسالة عن النص "Verify your Apple Account email address" واستخراج الكود
                for message in messages:
                    # الحصول على النص داخل الرسالة
                    message_text = message.get_text()

                    # التحقق إذا كان النص يحتوي على "Verify your Apple Account email address"
                    if "Verify your Apple Account email address" in message_text:
                        # استخراج الكود باستخدام تعبير عادي (الذي يتبع النص "code below on the email verification page:")
                        match = re.search(r'code below on the email verification page:\s*(\d+)', message_text)

                        if match:
                            verification_code = match.group(1)
                            print(f'Found the Apple message. The verification code is: {verification_code}')

                            return verification_code
                        else:
                            #print('لم يFound كود التحقق في الرسالة.')
                            return None

                print('Could not find a message containing the verification code.')

                return None


            # فصل الأرقام فقط من الكود
            def separate_digits(verification_code):
                return ''.join([digit for digit in verification_code if digit.isdigit()])


            # البحث عن الرسالة واستخراج الكود، مع إعادة المحاولة في حال عدم العثور عليها
            message_found = False
            attempt = 0
            while not message_found and attempt < 10:  # محاولة واحدة، إذا لم يجدها يعيد المحاولة
                html_content = page.content()
                verification_code = extract_verification_code_from_message(html_content)

                if verification_code:
                    message_found = True
                else:
                    attempt += 1
                    print(f"Could not find the message. Second attempt #{attempt}")

                    return_otp(page)  # عمل ريفريش للصفحة
                    
                    #time.sleep(5)  # الانتظار قبل المحاولة التالية



            if not message_found:
                print(f"Could not find the message after {attempt} attempts.")

                #log_error_Outlooks(account1)
                return False


                # إضافة الحساب إلى ملف الأخطاء


            # فصل الأرقام فقط من الكود
            verification_code_digits = separate_digits(verification_code)
            #time.sleep(10)
            otp = verification_code_digits

            return otp
        except Exception as e:
            print(f"An unexpected error occurred in attempt {attempt} for {email_Outlook}: {type(e).__name__} - {e}")

            return False
        






    def success_Outlooks(account1):
        """
        يحفظ الحساب في ملف done2.csv ويحذفه من ملف accounts2.csv.
        """
        try:
            with open("done.txt", 'a') as new:
                new.write(",".join(account1) + "\n")
            console.print(f"[bold green]Account {account1[0]} : successfully Changed")

            with open("input/emails.txt", "r") as file:
                account1s = file.readlines()

            with open("input/emails.txt", "w") as file:
                for acc in account1s:
                    if ":".join(account1) not in acc.strip():
                        file.write(acc)
        except Exception as e:
            console.print(f"[bold red]Error in saving successful account: {e}")


    def log_error_Outlooks(account1):
        """
        يسجل الحساب في ملف errors2.csv ويحذفه من ملف accounts2.csv.
        """
        try:
            with open("failed.txt", 'a') as error_file:
                error_file.write(":".join(account1) + "\n")
            console.print(f"[bold red]Account {account1[0]} : encountered an error and was moved to errors2.csv")

            with open("input/emails.txt", "r") as file:
                account1s = file.readlines()

            with open("input/emails.txt", "w") as file:
                for acc in account1s:
                    if ":".join(account1) in acc.strip():
                        account1s.remove(acc)
                        break
                file.writelines(account1s)
        except Exception as e:
            console.print(f"[bold red]Error in logging error account: {e}")




    def save_new_account(email_Outlook, password, phone, otp_link):
        try:
            # 🟢 1. نحفظ الحساب الجديد في New Accounts.csv
            file_name = "New Accounts.txt"
            today_date = datetime.today().strftime("%d/%m/%Y")
            data = [email_Outlook, password,"12/12/2000", phone, otp_link, today_date]

            with open(file_name, "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow(data)

            print(Fore.GREEN + f"  Account >>>>>> {email_Outlook} <<<<<< saved successfully.")

            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("Number_Done.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW +"📦 The number has been transferred" + Fore.GREEN + f"{phone} " + "to Number_Done.csv")
            else:
                print(f"Error⚠️ Number {phone} not found in input/Numbers.csv")

        except Exception as e:
            print(f"❌ Error: {e}")







    def error_Number(phone):

        try:
            # 🟡 2. نفتح ملف input/Numbers.csv ونقرأ كل الحسابات
            with open("input/Numbers.txt", "r", encoding="utf-8") as file:
                accounts_raw = file.read().strip().split("\n")
            accounts = [line for line in accounts_raw if line.strip()]

            # 🔵 3. نحدد السطر اللي يحتوي على رقم الهاتف المستخدم
            used_account = None
            for line in accounts:
                if phone in line:
                    used_account = line
                    break

            if used_account:
                # 🔴 4. ننقله إلى Number_Done.csv
                with open("error_Number.txt", "a", newline="", encoding="utf-8") as done_file:
                    done_file.write(used_account + "\n")

                # 🧹 5. نحذف السطر من input/Numbers.csv
                accounts.remove(used_account)
                with open("input/Numbers.txt", "w", encoding="utf-8") as file:
                    file.write("\n".join(accounts) + "\n")

                print(Fore.YELLOW +"📦 The number has been transferred" + Fore.GREEN + f"{phone} " + "to error_Number.txt")
                
            else:
                print(f"Error ⚠️ Number {phone} not found in input/Numbers.csv")

        except Exception as e:
            print(f"❌ Error: {e}")





    import sys

    class FilteredStdout:
        def __init__(self, stream):
            self.stream = stream
            self.blocked_message = "element.CurrentControlType returns 0, invalid ControlType!"

        def write(self, message):
            if self.blocked_message not in message:
                self.stream.write(message)

        def flush(self):
            self.stream.flush()

    sys.stdout = FilteredStdout(sys.stdout)




    # تشغيل الكود
    def main():

        admin_required = (os.name == 'nt')


        #print("--- HWID Spoofer Console ---")
        log_action("--- Spoofer Application Started (Console Mode) ---")

        if admin_required and not is_admin():
            #print("\n[!] Admin privileges required on Windows.")
            log_action("Admin privileges not detected, attempting elevation...")
            if not run_as_admin():
                # Elevation failed or was cancelled, or not on Windows
                log_action("Elevation failed or not attempted. Exiting.")
                sys.exit(1)
            # If run_as_admin succeeds, it exits the old process.
            # If we reach here, it means elevation failed/cancelled and run_as_admin returned False.
            sys.exit(1)

        # If we are here, we either have admin privileges on Windows or it's not required/Windows.
        if admin_required:
            #print("\n[+] Running with Administrator privileges.")
            log_action("Running with admin privileges.")
        else:
            #print("\n[*] Running (Non-Windows or Admin check passed/skipped).")
            log_action("Running (Non-Admin/Non-Windows).")

        
        while True:

            try:

                with open("input/Numbers.txt", "r") as file:
                    accounts_raw = file.read().strip().split("\n")

                # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                accounts = [account.split(",") for account in accounts_raw if account.strip() and len(account.split(",")) >= 2]

                if not accounts:
                    console.print("[bold red]❌ No valid accounts found in the file, the program will exit.")
                    break  # إنهاء الحلقة
                





                #email = ("Abdokj32j@jgh.com")
                with open("input/password.txt", "r") as file:
                    password = file.read().strip()




                    
                for account in accounts:
                    phone = account[0]
                    otp_link = account[1]


                    with open("input/emails.txt", "r", encoding="utf-8") as file:
                        account1s_raw = file.read().strip().split("\n")

                    # فلترة الأسطر اللي فيها عدد العناصر أقل من 2 (مثلاً لازم تكون email,password على الأقل)
                    account1s = [account1.split(":") for account1 in account1s_raw
                                if account1.strip() and len(account1.split(":")) >= 2]

                    if not account1s:
                        console.print("[bold red]❌ No valid account1s found in the file, the program will exit.")
                        break  # إنهاء الحلقة



                    
                    for account1 in account1s:
                        email_Outlook = account1[0]
                        password_Outlook = account1[1]
            


                        os.environ["PLAYWRIGHT_BROWSERS_PATH"] = "./ms-playwright"

                        with sync_playwright() as playwright:
                            browser = playwright.chromium.launch(headless=False,
                                            args=[
                                                "--disable-blink-features=AutomationControlled",
                                                "--disable-dev-shm-usage",
                                                "--disable-gpu",
                                                "--incognito",
                                                "--disable-extensions",
                                                "--disable-setuid-sandbox",
                                                "--disable-automation",
                                                "--disable-features=IsolateOrigins,site-per-process",
                                                "--window-size=800,800",
                                                "--window-position=0,0",
                                            ],
                                        )
                            def get_random_user_agent(file_path):
                                try:
                                    with open(file_path, "r", encoding="utf-8") as file:
                                        user_agents = file.readlines()
                                    user_agents = [ua.strip() for ua in user_agents if ua.strip()]
                                    return random.choice(user_agents) if user_agents else None
                                except Exception as e:
                                    console.print(f"[red]Error reading User-Agent file: {e}")
                                    return None    

                            user_agents_file = "input/user_agents.txt"
                            random_user_agent = get_random_user_agent(user_agents_file)

                            if not random_user_agent:
                                console.print("[red]There are no valid User-Agents.")
                                return

                            context = browser.new_context(accept_downloads=False,
                                                        bypass_csp=True,
                                                        user_agent=random_user_agent,
                                                        viewport={"width": 800, "height": 800},
                                                        permissions=[],
                                                        storage_state=None )
                            

             
                            page = context.new_page()

                            # تعطيل التحقق من مانع الإعلانات

                            faker = Faker('en_US')
                            # اختيار عنوان عشوائي من نيويورك
    

                        # تعيين العنوان بناءً على الدولة المختارة
                        # تعيين العنوان بناءً على الدولة المختارة
                        address_data1 = None  # تعيين القيمة الافتراضية لعدم وجود بيانات

                        try:
                            if selected_country == "United States":
                                address_data1 = random.choice(new_york_addresses)

                            elif selected_country == "Egypt":
                                address_data1 = random.choice(egypt_addresses)

                            elif selected_country == "South Africa":
                                address_data1 = random.choice(south_africa_addresses)

                            elif selected_country == "Hong Kong":
                                address_data1 = random.choice(hong_kong_addresses)

                            elif selected_country == "Germany":
                                address_data1 = random.choice(germany_addresses)

                            elif selected_country == "France":
                                address_data1 = random.choice(france_addresses)

                            elif selected_country == "Canada":
                                address_data1 = random.choice(canada_addresses)

                            elif selected_country == "Indonesia":
                                address_data1 = random.choice(indonesia_addresses)

                            elif selected_country == "Netherlands":
                                address_data1 = random.choice(netherlands_addresses)

                            elif selected_country == "Mexico":
                                address_data1 = random.choice(mexico_addresses)

                            elif selected_country == "Kazakhstan":
                                address_data1 = random.choice(kazakhstan_addresses)

                            elif selected_country == "Japan":
                                address_data1 = random.choice(japan_addresses)

                            elif selected_country == "Nigeria":
                                address_data1 = random.choice(nigeria_addresses)

                            elif selected_country == "Slovenia":
                                address_data1 = random.choice(slovenia_addresses)

                            elif selected_country == "Slovakia":
                                address_data1 = random.choice(slovakia_addresses)

                            elif selected_country == "Spain":
                                address_data1 = random.choice(spain_addresses)

                            elif selected_country == "Thailand":
                                address_data1 = random.choice(thailand_addresses)

                            elif selected_country == "United Kingdom":
                                address_data1 = random.choice(uk_addresses)

                            elif selected_country == "Bolivia":
                                address_data1 = random.choice(bolivia_addresses)

                            elif selected_country == "Italy":
                                address_data1 = random.choice(italy_addresses)

                            else:
                                print("No matching country found.")
                                address_data1 = None  # في حال عدم وجود دولة مطابقة، قم بتعيين None

                        except Exception as e:
                            print(f"Error occurred: {e}")
                            address_data1 = None


                        # إذا تم تعيين address_data1 بنجاح، نقوم بتعيينها للمتغير address_data
                        if address_data1:
                            address_data = address_data1
                            print(f"Address selected: {address_data['city']}, {address_data['zip']}")
                        else:
                            print("No address data selected.")

                            # توليد باقي العنوان باستخدام Faker
                            street = faker.street_address()
                            full_address = f"{street}, {address_data['city']}, Cairo {address_data['zip']}"
                            # ✅ 1. خزّن الاسم الأول والاسم الأخير
                            first_name = faker.first_name()
                            last_name = faker.last_name()

                            # ✅ 2. ركّب الاسم الكامل
                            full_name = f"{first_name} {last_name}"
                            #print("👤 Name:  " + Fore.YELLOW + f"{full_name}")
                            

                            #email = email_Outlook

                    
                            #process_Outlook_account1(page, email_Outlook, password_Outlook ,account1 )
                            success = process_Outlook_account(page, email_Outlook, password_Outlook, account1)
                            if not success:
                                print("❌ Outlook process failed - restarting from the beginning...")

                                continue  # نرجع يعيد كل الكود من أول وجديد
                                    

                            #email = tempmail(page)
                            #email = email_Outlook


                            try:
                                success_flag = process_account(page,account1,email_Outlook, password,password_Outlook, phone, otp_link, first_name, last_name, full_name, faker,address_data, full_address, street) 
                                if not success_flag:
                                    #log_error(account)
                                    continue  # الانتقال للحساب التالي

                                #Reset()

                                # ✅ ننتظر شوية علشان ندي فرصة لكل العمليات تقفل تمامًا
                                #time.sleep(3)

                                # # المسار الأساسي
                                # base_path = r"C:\Users\Dubai\AppData\Local\Packages\AppleInc.AppleTVWin_nzyj5cx40ttqa"

                                # try:
                                #     for item in os.listdir(base_path):
                                #         item_path = os.path.join(base_path, item)

                                #         if item == "Settings":
                                #             print("📁 تم الاحتفاظ بمجلد Settings كما هو")
                                #             continue

                                #         if os.path.isdir(item_path):
                                #             # نحذف محتوى المجلد بس، مش المجلد نفسه
                                #             for sub_item in os.listdir(item_path):
                                #                 sub_item_path = os.path.join(item_path, sub_item)
                                #                 if os.path.isdir(sub_item_path):
                                #                     shutil.rmtree(sub_item_path)
                                #                 else:
                                #                     os.remove(sub_item_path)
                                #             print(f"🧹 تم تفريغ محتوى المجلد: {item}")
                                #         elif os.path.isfile(item_path):
                                #             os.remove(item_path)
                                #             print(f"🧹 تم حذف الملف: {item}")

                                #     print("\n✅ تم تفريغ كل المجلدات والملفات ما عدا Settings والمجلدات نفسها لسه موجودة")
                                #     time.sleep(2)

                                # except Exception as e:
                                #     print("❌ فيه مشكلة أثناء التفريغ:", e)


                            except Exception as e:
                                print(f"Failed to process the account {email_Outlook}: {e}")

                                continue  # الانتقال للحساب التالي


                            finally:
                                # إزالة اعتراض الإعلانات للسماح بالتفاعل اليدوي
                                context.unroute("**/*ads*")
                                # إغلاق المتصفح بعد المعالجة
                                context.close()
                                browser.close()

                                     
                    log_files = ["spoof_log.txt"]

                    for file in log_files:
                        if os.path.exists(file):
                            os.remove(file)
                            #print(f"✅ تم حذف {file}") 
                        else:
                            print("")
                    
                    #break
                

            except Exception as e:
                print(Fore.RED +f"General error: {e}")



        sys.exit(0)

    if __name__ == "__main__":
        main()
        

#///////////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////


import os
import requests
from datetime import datetime

# دالة لإنشاء المجلد المخفي
def create_hidden_folder():
    appdata_path = os.getenv('APPDATA')
    hidden_folder = os.path.join(appdata_path, '.my_hidden_folder')
    if not os.path.exists(hidden_folder):
        os.mkdir(hidden_folder)
    return hidden_folder

# دالة لتخزين المفتاح في الملف المخفي
def store_license_key(license_key):
    hidden_folder = create_hidden_folder()
    key_file_path = os.path.join(hidden_folder, 'license.key')
    with open(key_file_path, 'w') as f:
        f.write(license_key)

# دالة لتحميل المفتاح المخزن من الملف المخفي
def load_license_key():
    hidden_folder = create_hidden_folder()
    key_file_path = os.path.join(hidden_folder, 'license.key')
    if os.path.exists(key_file_path):
        with open(key_file_path, 'r') as f:
            return f.read().strip()
    return None

# دالة لجعل المجلد مخفيًا (على Windows)
def hide_folder(folder_path):
    if os.name == 'nt':
        os.system(f'attrib +h "{folder_path}"')

# دالة للتحقق من صلاحية المفتاح باستخدام Firebase
def check_key_validity(key, first_activation=False):
    firebase_url = 'https://activation-key-899-default-rtdb.asia-southeast1.firebasedatabase.app/activation_keys.json'
    response = requests.get(firebase_url)

    if response.status_code == 200:
        data = response.json()
        if key not in data:
            #print(f"❌ The code {key} is incorrect.")
            print(Fore.RED + f"❌ The code is incorrect.")
            return False
        else:
            expiry_date_str = data[key]['data']
            expiry_date = datetime.strptime(expiry_date_str, '%d/%m/%Y')
            current_date = datetime.now()

            devices_count = int(data[key].get('devices', 0))  # نقرأ عدد الأجهزة

            # إذا كانت أول مرة تفعيل أو المفتاح منتهي
            if first_activation:
                if devices_count <= 0:
                    print(Fore.RED +"❌ The key is used up or no devices are available for this key.")
                    return False
                else:
                    # تقليل عدد الأجهزة بمقدار 1
                    updated_devices_count = devices_count - 1
                    update_devices_count_in_firebase(key, updated_devices_count)

            if current_date > expiry_date:
                print(Fore.RED +f"❌ The code expired on {expiry_date_str}.")
                #print(Fore.RED +f"❌ The code {key} expired on {expiry_date_str}.")
                return False
            else:
                print(Fore.GREEN +f"✅ The code is valid until {expiry_date_str}.")
                #print(f"✅ The code {key} is valid until {expiry_date_str}.")

                return True
    else:
        print(Fore.RED + f"❌ Failed to read data from : {response.status_code}")
        return False

# دالة لتحديث عدد الأجهزة على Firebase
def update_devices_count_in_firebase(key, new_count):
    firebase_update_url = f"https://activation-key-899-default-rtdb.asia-southeast1.firebasedatabase.app/activation_keys/{key}/devices.json"
    response = requests.put(firebase_update_url, json=new_count)
    if response.status_code == 200:
        print(Fore.YELLOW +f"📉 The number of devices has been updated to {new_count}.")
        #print(f"📉 تم تحديث عدد الأجهزة إلى {new_count}.")
    else:
        print(Fore.RED +f"❌ Failed to update the number of devices: {response.status_code}")

# دالة لتفعيل البرنامج
def activate_program():
    stored_key = load_license_key()

    if stored_key:
        # التحقق من صلاحية المفتاح المخزن
        if check_key_validity(stored_key):
            print(Fore.GREEN +"✅ The program has been successfully activated!")
        else:
            print(Fore.RED +"❌ The key is invalid or has expired. Please enter a new key or renew your subscription.")

            new_key = input(Fore.YELLOW +"Please enter the new activation key: ")

            if new_key:
                if check_key_validity(new_key, first_activation=True):
                    store_license_key(new_key)
                    print(Fore.GREEN +"✅ The program has been activated with the new key!")
                else:
                     print(Fore.RED +"❌ A valid key was not entered, the program was not activated.")
            else:
                 print(Fore.RED +"❌ A valid key was not entered, the program was not activated.")
    else:
        #print("❌ لم يتم العثور على مفتاح التفعيل.")
        new_key = input(Fore.YELLOW +"Please enter the new activation key: ")

        if new_key:
            if check_key_validity(new_key, first_activation=True):
                store_license_key(new_key)
                print(Fore.GREEN +"✅ The program has been activated with the new key!")
            else:
                print(Fore.RED +"❌ A valid key was not entered, the program was not activated.")
        else:
            print(Fore.RED +"❌ A valid key was not entered, the program was not activated.")

# وظيفة لتفعيل البرنامج عند تشغيل السكربت
if __name__ == "__main__":
    hidden_folder = create_hidden_folder()
    hide_folder(hidden_folder)

    activate_program()





#///////////////////////////////////////////////////////////////////////////////////////////
#///////////////////////////////////////////////////////////////////////////////////////////








# ✅ دالة التحقق من صلاحيات الأدمن
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

# ✅ دالة تشغيل السكربت كأدمن
def run_as_admin():
    try:
        # نحط علامات اقتباس حول المسارات
        script = f'"{sys.argv[0]}"'
        params = ' '.join([f'"{arg}"' for arg in sys.argv[1:]])
        command = f'{script} {params}'
        ctypes.windll.shell32.ShellExecuteW(
            None, "runas", sys.executable, command, None, 1)
        return True
    except Exception as e:
        #print(f"[!] خطأ أثناء محاولة التشغيل كأدمن: {e}")
        return False


def log_action(message):
    log_file_path = "log.txt"
    
    # كتابة الرسالة
    with open(log_file_path, "w", encoding="utf-8") as log_file:
        log_file.write(f"[LOG] {message}\n")
    
    # حذف الملف بعد الكتابة
    os.remove(log_file_path)


# ✅ التحقق من وضع الأدمن أولاً
admin_required = (os.name == 'nt')



log_action("=== Application startup ===")


if admin_required and not is_admin():
    #print("\n[!] يتطلب التشغيل بصلاحيات الأدمن.")
    log_action("Admin privileges not found. Attempting to run as admin...")

    
    if run_as_admin():
        log_action("Attempted to run as admin, the current process will be closed.")

        sys.exit(0)  # العملية الأصلية تنتهي الآن
    else:
        log_action("Failed to run the application as admin. Closing the application.")

        #print("\n[X] فشل التشغيل كأدمن. تأكد من الموافقة على رسالة UAC.")
        time.sleep(3)
        sys.exit(1)

#print("\n[+] جاري التشغيل بصلاحيات الأدمن.")
log_action("✅ Now running with admin privileges.")












# إنشاء كائن Console من rich
console = Console()
# تفعيل دعم الألوان في موجه الأوامر
init(autoreset=True)


# تعريف الألوان
GREEN = Fore.GREEN
BLUE = Fore.BLUE
RED = Fore.RED
CYAN = Fore.CYAN
RESET = Style.RESET_ALL
MAGENTA = Fore.MAGENTA


# تفعيل دعم الألوان للويندوز
init(autoreset=True)

# تنظيف الشاشة
os.system('cls' if os.name == 'nt' else 'clear')

# # العنوان الرئيسي
# print(Fore.CYAN + Style.BRIGHT + "="*40)
# print(Fore.MAGENTA + Style.BRIGHT + "         ---- 2FA Creation ----")
# print(Fore.CYAN + Style.BRIGHT + "="*40 + "\n")

# رسم مميز للاسم
print(Fore.YELLOW + Style.BRIGHT + """
  ______   __              __                   ______                             __ 
 /      \ /  |            /  |                 /      \                           /  |
/$$$$$$  |$$ |____    ____$$ |  ______        /$$$$$$  |  ______    ______    ____$$ |
$$ |__$$ |$$      \  /    $$ | /      \       $$ \__$$/  /      \  /      \  /    $$ |
$$    $$ |$$$$$$$  |/$$$$$$$ |/$$$$$$  |      $$      \  $$$$$$  | $$$$$$  |/$$$$$$$ |
$$$$$$$$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |       $$$$$$  | /    $$ | /    $$ |$$ |  $$ |
$$ |  $$ |$$ |__$$ |$$ \__$$ |$$ \__$$ |      /  \__$$ |/$$$$$$$ |/$$$$$$$ |$$ \__$$ |
$$ |  $$ |$$    $$/ $$    $$ |$$    $$/       $$    $$/ $$    $$ |$$    $$ |$$    $$ |
$$/   $$/ $$$$$$$/   $$$$$$$/  $$$$$$/         $$$$$$/   $$$$$$$/  $$$$$$$/  $$$$$$$/ 
                                                                                       
                                                                                       
""")

# رقم الهاتف
print(Fore.GREEN + Style.BRIGHT + "            📞 01063592101\n")

# نهاية الإطار
print(Fore.CYAN + Style.BRIGHT + "="*40 + "\n")


# تقديم الخيارات للمستخدم

# # Presenting options to the user
# print(Fore.CYAN +"\n Choose a number:\n")
# print(Fore.YELLOW +" 1 - Creat_Outlook/Hotmail")
# print(Fore.YELLOW +" 2 - Outlook_And_Hotmail_requests")
# print(Fore.YELLOW +" 3 - Outlook_Bee_Mail")
# print(Fore.YELLOW +" 4 - Hotmail_Bee_Mail")
# print(Fore.YELLOW +" 5 - Creat_temp_mail")
# print(Fore.YELLOW +" 6 - Creat_gmail")

# choice = input(Fore.MAGENTA + "\n Your choice: ")




# # معالجة اختيار المستخدم
# if choice == "1":
#     Creat_Outlook()
# elif choice == "2":
#     Outlook_And_Hotmail_requests ()
# elif choice == "3":
#     Outlook_Bee_Mail ()
# elif choice == "4":
#     Hotmail_Bee_Mail ()
# elif choice == "5":
#     Creat_temp_mail()
# elif choice == "6":
#     Creat_gmail()
# else:
#     print("❌ اختيار غير صحيح.")
#     log_action("❌ اختيار غير صحيح من المستخدم.")


# def Countries ():
#     Country = input( " Enter the country's name. : ")
#     return Country

# Countries ()
# This function will be responsible for asking the user to choose a country
def select_country():
    countries = [
        "Canada", "Egypt", "France", "Germany", "Hong Kong", 
        "Indonesia", "Italy", "Japan", "Kazakhstan", "Mexico",
        "Netherlands", "Nigeria", "South Africa", "Slovakia",
        "Slovenia", "Spain", "Thailand", "United Kingdom", 
        "United States", "Bolivia"
    ]

    print(Fore.CYAN + "Please choose a country:")
    for index, country in enumerate(countries, start=1):
        print(Fore.YELLOW + f"{index}. {country}")
    
    while True:
        try:
            choice = int(input(Fore.GREEN + "Enter the number of your choice: "))
            if 1 <= choice <= len(countries):
                selected_country = countries[choice - 1]
                print(f"You have selected {selected_country}.")
                return selected_country
            else:
                print(Fore.RED + "❌ Invalid choice. Please choose a number from the list.")
        except ValueError:
            print(Fore.RED + "❌ Invalid input. Please enter a number.")

# Calling the function
selected_country = select_country()


# قائمة الخيارات
main_choices = {
    "1": [
        ("Outlook/Hotmail ", Outlook_And_Hotmail_requests),
        ("Outlook_Bee_Mail", Outlook_Bee_Mail),
        ("Hotmail_Bee_Mail", Hotmail_Bee_Mail),
        ("Outlook/Hotmail" + Fore.YELLOW + " (Not requests)", Creat_Outlook),

    ],
    "2": [
        #("temp_mail_email"+ Fore.YELLOW + "(Not requests)", Creat_temp_mail_email),
        ("tempmail gw", Creat_temp_mail_gw),
        ("tempmail lol", Creat_tempmail_lol),
        ("10minutemail", Creat_10minutemail),
        ("tempmail tm", Creat_temp_mail_tm),
        #("temporary_mail" + Fore.YELLOW + "(Not requests)", Creat_temporary_mail),
        #("temporarymail" + Fore.YELLOW + "(Not requests)", Creat_temporarymail),
        #("tempmail rip" + Fore.YELLOW + "(Not requests)", Creat_temp_mail_rip()),
        ("tempmail nonja" + Fore.YELLOW + "(Not requests)", Creat_temp_mail),

    ],

    "3": [("Creat_gmail", Creat_gmail),
         ("smsbower_gmail", Creat_smsbower_gmail),
    
    ],

    
}


# عرض الاختيارات للمستخدم
print(Fore.CYAN + "\n Choose a number:\n")
print(Fore.YELLOW + " 1 - Outlook/Hotmail Options")
print(Fore.YELLOW + " 2 - Temp Mail Options")
print(Fore.YELLOW + " 3 - Gmail Option")

choice = input(Fore.MAGENTA + "\n Your choice: ")

# إذا كان الاختيار 1
if choice == "1":
    print(Fore.CYAN + "\nChoose one of the following Outlook/Hotmail options:\n")
    # عرض خيارات داخلية لـ Outlook/Hotmail
    for idx, (name, func) in enumerate(main_choices[choice], 1):
        print(f"{idx}. {name}")
    sub_choice = int(input(Fore.MAGENTA + "\nYour choice: "))
    main_choices[choice][sub_choice - 1][1]()  # استدعاء الدالة المناسبة

# إذا كان الاختيار 2
elif choice == "2":
    print(Fore.CYAN + "\nChoose one of the following Temp Mail options:\n")
    # عرض خيارات داخلية لـ Temp Mail
    for idx, (name, func) in enumerate(main_choices[choice], 1):
        print(f"{idx}. {name}")
    sub_choice = int(input(Fore.MAGENTA + "\nYour choice: "))
    main_choices[choice][sub_choice - 1][1]()  # استدعاء الدالة المناسبة


# إذا كان الاختيار 2
elif choice == "3":
    print(Fore.CYAN + "\nChoose one of the following gmail options:\n")
    # عرض خيارات داخلية لـ gmail
    for idx, (name, func) in enumerate(main_choices[choice], 1):
        print(f"{idx}. {name}")
    sub_choice = int(input(Fore.MAGENTA + "\nYour choice: "))
    main_choices[choice][sub_choice - 1][1]()  # استدعاء الدالة المناسبة



# إذا كان الاختيار 3
# elif choice == "3":
#     print("Creat_gmail")
#     main_choices[choice][0][1]()  # استدعاء الدالة المناسبة

else:
    print(Fore.RED +"❌Incorrect choice" )

